/*
* generated by Xtext
*/

package org.eclipse.emf.ecore.xcore.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.xbase.services.XbaseGrammarAccess;
import org.eclipse.xtext.xbase.services.XtypeGrammarAccess;

@Singleton
public class XcoreGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class XPackageElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XPackage");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAnnotationsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAnnotationsXAnnotationParserRuleCall_0_0 = (RuleCall)cAnnotationsAssignment_0.eContents().get(0);
		private final Keyword cPackageKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameQualifiedNameParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Assignment cImportDirectivesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cImportDirectivesXImportDirectiveParserRuleCall_3_0 = (RuleCall)cImportDirectivesAssignment_3.eContents().get(0);
		private final Assignment cAnnotationDirectivesAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cAnnotationDirectivesXAnnotationDirectiveParserRuleCall_4_0 = (RuleCall)cAnnotationDirectivesAssignment_4.eContents().get(0);
		private final Assignment cClassifiersAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cClassifiersXClassifierParserRuleCall_5_0 = (RuleCall)cClassifiersAssignment_5.eContents().get(0);
		
		//XPackage:
		//	annotations+=XAnnotation* "package" name=QualifiedName importDirectives+=XImportDirective*
		//	annotationDirectives+=XAnnotationDirective* classifiers+=XClassifier*;
		public ParserRule getRule() { return rule; }

		//annotations+=XAnnotation* "package" name=QualifiedName importDirectives+=XImportDirective*
		//annotationDirectives+=XAnnotationDirective* classifiers+=XClassifier*
		public Group getGroup() { return cGroup; }

		//annotations+=XAnnotation*
		public Assignment getAnnotationsAssignment_0() { return cAnnotationsAssignment_0; }

		//XAnnotation
		public RuleCall getAnnotationsXAnnotationParserRuleCall_0_0() { return cAnnotationsXAnnotationParserRuleCall_0_0; }

		//"package"
		public Keyword getPackageKeyword_1() { return cPackageKeyword_1; }

		//name=QualifiedName
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//QualifiedName
		public RuleCall getNameQualifiedNameParserRuleCall_2_0() { return cNameQualifiedNameParserRuleCall_2_0; }

		//importDirectives+=XImportDirective*
		public Assignment getImportDirectivesAssignment_3() { return cImportDirectivesAssignment_3; }

		//XImportDirective
		public RuleCall getImportDirectivesXImportDirectiveParserRuleCall_3_0() { return cImportDirectivesXImportDirectiveParserRuleCall_3_0; }

		//annotationDirectives+=XAnnotationDirective*
		public Assignment getAnnotationDirectivesAssignment_4() { return cAnnotationDirectivesAssignment_4; }

		//XAnnotationDirective
		public RuleCall getAnnotationDirectivesXAnnotationDirectiveParserRuleCall_4_0() { return cAnnotationDirectivesXAnnotationDirectiveParserRuleCall_4_0; }

		//classifiers+=XClassifier*
		public Assignment getClassifiersAssignment_5() { return cClassifiersAssignment_5; }

		//XClassifier
		public RuleCall getClassifiersXClassifierParserRuleCall_5_0() { return cClassifiersXClassifierParserRuleCall_5_0; }
	}

	public class XAnnotationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XAnnotation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCommercialAtKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cSourceAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cSourceXAnnotationDirectiveCrossReference_1_0 = (CrossReference)cSourceAssignment_1.eContents().get(0);
		private final RuleCall cSourceXAnnotationDirectiveValidIDParserRuleCall_1_0_1 = (RuleCall)cSourceXAnnotationDirectiveCrossReference_1_0.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cDetailsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cDetailsXStringToStringMapEntryParserRuleCall_2_1_0 = (RuleCall)cDetailsAssignment_2_1.eContents().get(0);
		private final Group cGroup_2_2 = (Group)cGroup_2.eContents().get(2);
		private final Keyword cCommaKeyword_2_2_0 = (Keyword)cGroup_2_2.eContents().get(0);
		private final Assignment cDetailsAssignment_2_2_1 = (Assignment)cGroup_2_2.eContents().get(1);
		private final RuleCall cDetailsXStringToStringMapEntryParserRuleCall_2_2_1_0 = (RuleCall)cDetailsAssignment_2_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_3 = (Keyword)cGroup_2.eContents().get(3);
		
		//XAnnotation:
		//	"@" source=[XAnnotationDirective|ValidID] ("(" details+=XStringToStringMapEntry (","
		//	details+=XStringToStringMapEntry)* ")")?;
		public ParserRule getRule() { return rule; }

		//"@" source=[XAnnotationDirective|ValidID] ("(" details+=XStringToStringMapEntry ("," details+=XStringToStringMapEntry)*
		//")")?
		public Group getGroup() { return cGroup; }

		//"@"
		public Keyword getCommercialAtKeyword_0() { return cCommercialAtKeyword_0; }

		//source=[XAnnotationDirective|ValidID]
		public Assignment getSourceAssignment_1() { return cSourceAssignment_1; }

		//[XAnnotationDirective|ValidID]
		public CrossReference getSourceXAnnotationDirectiveCrossReference_1_0() { return cSourceXAnnotationDirectiveCrossReference_1_0; }

		//ValidID
		public RuleCall getSourceXAnnotationDirectiveValidIDParserRuleCall_1_0_1() { return cSourceXAnnotationDirectiveValidIDParserRuleCall_1_0_1; }

		//("(" details+=XStringToStringMapEntry ("," details+=XStringToStringMapEntry)* ")")?
		public Group getGroup_2() { return cGroup_2; }

		//"("
		public Keyword getLeftParenthesisKeyword_2_0() { return cLeftParenthesisKeyword_2_0; }

		//details+=XStringToStringMapEntry
		public Assignment getDetailsAssignment_2_1() { return cDetailsAssignment_2_1; }

		//XStringToStringMapEntry
		public RuleCall getDetailsXStringToStringMapEntryParserRuleCall_2_1_0() { return cDetailsXStringToStringMapEntryParserRuleCall_2_1_0; }

		//("," details+=XStringToStringMapEntry)*
		public Group getGroup_2_2() { return cGroup_2_2; }

		//","
		public Keyword getCommaKeyword_2_2_0() { return cCommaKeyword_2_2_0; }

		//details+=XStringToStringMapEntry
		public Assignment getDetailsAssignment_2_2_1() { return cDetailsAssignment_2_2_1; }

		//XStringToStringMapEntry
		public RuleCall getDetailsXStringToStringMapEntryParserRuleCall_2_2_1_0() { return cDetailsXStringToStringMapEntryParserRuleCall_2_2_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_2_3() { return cRightParenthesisKeyword_2_3; }
	}

	public class XStringToStringMapEntryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XStringToStringMapEntry");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cKeyAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cKeyQualifiedNameParserRuleCall_0_0 = (RuleCall)cKeyAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueSTRINGTerminalRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		//XStringToStringMapEntry:
		//	key=QualifiedName "=" value=STRING;
		public ParserRule getRule() { return rule; }

		//key=QualifiedName "=" value=STRING
		public Group getGroup() { return cGroup; }

		//key=QualifiedName
		public Assignment getKeyAssignment_0() { return cKeyAssignment_0; }

		//QualifiedName
		public RuleCall getKeyQualifiedNameParserRuleCall_0_0() { return cKeyQualifiedNameParserRuleCall_0_0; }

		//"="
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }

		//value=STRING
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }

		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_2_0() { return cValueSTRINGTerminalRuleCall_2_0; }
	}

	public class XImportDirectiveElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XImportDirective");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cImportKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cImportedNamespaceAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cImportedNamespaceQualifiedNameWithWildcardParserRuleCall_1_0 = (RuleCall)cImportedNamespaceAssignment_1.eContents().get(0);
		
		//XImportDirective:
		//	"import" importedNamespace=QualifiedNameWithWildcard;
		public ParserRule getRule() { return rule; }

		//"import" importedNamespace=QualifiedNameWithWildcard
		public Group getGroup() { return cGroup; }

		//"import"
		public Keyword getImportKeyword_0() { return cImportKeyword_0; }

		//importedNamespace=QualifiedNameWithWildcard
		public Assignment getImportedNamespaceAssignment_1() { return cImportedNamespaceAssignment_1; }

		//QualifiedNameWithWildcard
		public RuleCall getImportedNamespaceQualifiedNameWithWildcardParserRuleCall_1_0() { return cImportedNamespaceQualifiedNameWithWildcardParserRuleCall_1_0; }
	}

	public class QualifiedNameWithWildcardElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "QualifiedNameWithWildcard");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cQualifiedNameParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cFullStopAsteriskKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//QualifiedNameWithWildcard returns ecore::EString:
		//	QualifiedName ".*"?;
		public ParserRule getRule() { return rule; }

		//QualifiedName ".*"?
		public Group getGroup() { return cGroup; }

		//QualifiedName
		public RuleCall getQualifiedNameParserRuleCall_0() { return cQualifiedNameParserRuleCall_0; }

		//".*"?
		public Keyword getFullStopAsteriskKeyword_1() { return cFullStopAsteriskKeyword_1; }
	}

	public class XAnnotationDirectiveElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XAnnotationDirective");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAnnotationKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cSourceURIAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cSourceURISTRINGTerminalRuleCall_1_0 = (RuleCall)cSourceURIAssignment_1.eContents().get(0);
		private final Keyword cAsKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameValidIDParserRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		
		//XAnnotationDirective:
		//	"annotation" sourceURI=STRING "as" name=ValidID;
		public ParserRule getRule() { return rule; }

		//"annotation" sourceURI=STRING "as" name=ValidID
		public Group getGroup() { return cGroup; }

		//"annotation"
		public Keyword getAnnotationKeyword_0() { return cAnnotationKeyword_0; }

		//sourceURI=STRING
		public Assignment getSourceURIAssignment_1() { return cSourceURIAssignment_1; }

		//STRING
		public RuleCall getSourceURISTRINGTerminalRuleCall_1_0() { return cSourceURISTRINGTerminalRuleCall_1_0; }

		//"as"
		public Keyword getAsKeyword_2() { return cAsKeyword_2; }

		//name=ValidID
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }

		//ValidID
		public RuleCall getNameValidIDParserRuleCall_3_0() { return cNameValidIDParserRuleCall_3_0; }
	}

	public class XClassifierElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XClassifier");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cXClassParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cXDataTypeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cXEnumParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//XClassifier:
		//	XClass | XDataType | XEnum;
		public ParserRule getRule() { return rule; }

		//XClass | XDataType | XEnum
		public Alternatives getAlternatives() { return cAlternatives; }

		//XClass
		public RuleCall getXClassParserRuleCall_0() { return cXClassParserRuleCall_0; }

		//XDataType
		public RuleCall getXDataTypeParserRuleCall_1() { return cXDataTypeParserRuleCall_1; }

		//XEnum
		public RuleCall getXEnumParserRuleCall_2() { return cXEnumParserRuleCall_2; }
	}

	public class XDataTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XDataType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAnnotationsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAnnotationsXAnnotationParserRuleCall_0_0 = (RuleCall)cAnnotationsAssignment_0.eContents().get(0);
		private final Keyword cTypeKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cLessThanSignKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cTypeParametersAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cTypeParametersXTypeParameterParserRuleCall_3_1_0 = (RuleCall)cTypeParametersAssignment_3_1.eContents().get(0);
		private final Group cGroup_3_2 = (Group)cGroup_3.eContents().get(2);
		private final Keyword cCommaKeyword_3_2_0 = (Keyword)cGroup_3_2.eContents().get(0);
		private final Assignment cTypeParametersAssignment_3_2_1 = (Assignment)cGroup_3_2.eContents().get(1);
		private final RuleCall cTypeParametersXTypeParameterParserRuleCall_3_2_1_0 = (RuleCall)cTypeParametersAssignment_3_2_1.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_3_3 = (Keyword)cGroup_3.eContents().get(3);
		private final Keyword cWrapsKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cInstanceTypeNameAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cInstanceTypeNameQualifiedNameParserRuleCall_5_0 = (RuleCall)cInstanceTypeNameAssignment_5.eContents().get(0);
		private final UnorderedGroup cUnorderedGroup_6 = (UnorderedGroup)cGroup.eContents().get(6);
		private final Group cGroup_6_0 = (Group)cUnorderedGroup_6.eContents().get(0);
		private final Assignment cSerializableAssignment_6_0_0 = (Assignment)cGroup_6_0.eContents().get(0);
		private final Keyword cSerializableCreateKeyword_6_0_0_0 = (Keyword)cSerializableAssignment_6_0_0.eContents().get(0);
		private final Assignment cCreateBodyAssignment_6_0_1 = (Assignment)cGroup_6_0.eContents().get(1);
		private final RuleCall cCreateBodyXBlockExpressionParserRuleCall_6_0_1_0 = (RuleCall)cCreateBodyAssignment_6_0_1.eContents().get(0);
		private final Group cGroup_6_1 = (Group)cUnorderedGroup_6.eContents().get(1);
		private final Keyword cConvertKeyword_6_1_0 = (Keyword)cGroup_6_1.eContents().get(0);
		private final Assignment cConvertBodyAssignment_6_1_1 = (Assignment)cGroup_6_1.eContents().get(1);
		private final RuleCall cConvertBodyXBlockExpressionParserRuleCall_6_1_1_0 = (RuleCall)cConvertBodyAssignment_6_1_1.eContents().get(0);
		
		//XDataType:
		//	annotations+=XAnnotation* "type" name=ID ("<" typeParameters+=XTypeParameter ("," typeParameters+=XTypeParameter)*
		//	">")? "wraps" instanceTypeName=QualifiedName ((serializable?="create" createBody=XBlockExpression)? / *
		//	   * In scope for create should be what's visible in XyzFactoryImpl and 'this' will denote the literal value.
		//	   * The block expression must yield null or an instance of the wrapped type.
		//	   * / / *
		//	   * In scope for create should be what's visible in XyzFactoryImpl 
		//	   * and 'this' will denote an instance of the wrapped type.
		//	   * The block expression must yield a java.lang.String.
		//	   * / & ("convert" convertBody=XBlockExpression)?);
		public ParserRule getRule() { return rule; }

		//annotations+=XAnnotation* "type" name=ID ("<" typeParameters+=XTypeParameter ("," typeParameters+=XTypeParameter)* ">")?
		//"wraps" instanceTypeName=QualifiedName ((serializable?="create" createBody=XBlockExpression)? / *
		//	   * In scope for create should be what's visible in XyzFactoryImpl and 'this' will denote the literal value.
		//	   * The block expression must yield null or an instance of the wrapped type.
		//	   * / / *
		//	   * In scope for create should be what's visible in XyzFactoryImpl 
		//	   * and 'this' will denote an instance of the wrapped type.
		//	   * The block expression must yield a java.lang.String.
		//	   * / & ("convert" convertBody=XBlockExpression)?)
		public Group getGroup() { return cGroup; }

		//annotations+=XAnnotation*
		public Assignment getAnnotationsAssignment_0() { return cAnnotationsAssignment_0; }

		//XAnnotation
		public RuleCall getAnnotationsXAnnotationParserRuleCall_0_0() { return cAnnotationsXAnnotationParserRuleCall_0_0; }

		//"type"
		public Keyword getTypeKeyword_1() { return cTypeKeyword_1; }

		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }

		//("<" typeParameters+=XTypeParameter ("," typeParameters+=XTypeParameter)* ">")?
		public Group getGroup_3() { return cGroup_3; }

		//"<"
		public Keyword getLessThanSignKeyword_3_0() { return cLessThanSignKeyword_3_0; }

		//typeParameters+=XTypeParameter
		public Assignment getTypeParametersAssignment_3_1() { return cTypeParametersAssignment_3_1; }

		//XTypeParameter
		public RuleCall getTypeParametersXTypeParameterParserRuleCall_3_1_0() { return cTypeParametersXTypeParameterParserRuleCall_3_1_0; }

		//("," typeParameters+=XTypeParameter)*
		public Group getGroup_3_2() { return cGroup_3_2; }

		//","
		public Keyword getCommaKeyword_3_2_0() { return cCommaKeyword_3_2_0; }

		//typeParameters+=XTypeParameter
		public Assignment getTypeParametersAssignment_3_2_1() { return cTypeParametersAssignment_3_2_1; }

		//XTypeParameter
		public RuleCall getTypeParametersXTypeParameterParserRuleCall_3_2_1_0() { return cTypeParametersXTypeParameterParserRuleCall_3_2_1_0; }

		//">"
		public Keyword getGreaterThanSignKeyword_3_3() { return cGreaterThanSignKeyword_3_3; }

		//"wraps"
		public Keyword getWrapsKeyword_4() { return cWrapsKeyword_4; }

		//instanceTypeName=QualifiedName
		public Assignment getInstanceTypeNameAssignment_5() { return cInstanceTypeNameAssignment_5; }

		//QualifiedName
		public RuleCall getInstanceTypeNameQualifiedNameParserRuleCall_5_0() { return cInstanceTypeNameQualifiedNameParserRuleCall_5_0; }

		//(serializable?="create" createBody=XBlockExpression)? / *
		//	   * In scope for create should be what's visible in XyzFactoryImpl and 'this' will denote the literal value.
		//	   * The block expression must yield null or an instance of the wrapped type.
		//	   * / / *
		//	   * In scope for create should be what's visible in XyzFactoryImpl 
		//	   * and 'this' will denote an instance of the wrapped type.
		//	   * The block expression must yield a java.lang.String.
		//	   * / & ("convert" convertBody=XBlockExpression)?
		public UnorderedGroup getUnorderedGroup_6() { return cUnorderedGroup_6; }

		//(serializable?="create" createBody=XBlockExpression)?
		public Group getGroup_6_0() { return cGroup_6_0; }

		//serializable?="create"
		public Assignment getSerializableAssignment_6_0_0() { return cSerializableAssignment_6_0_0; }

		//"create"
		public Keyword getSerializableCreateKeyword_6_0_0_0() { return cSerializableCreateKeyword_6_0_0_0; }

		//createBody=XBlockExpression
		public Assignment getCreateBodyAssignment_6_0_1() { return cCreateBodyAssignment_6_0_1; }

		//XBlockExpression
		public RuleCall getCreateBodyXBlockExpressionParserRuleCall_6_0_1_0() { return cCreateBodyXBlockExpressionParserRuleCall_6_0_1_0; }

		//("convert" convertBody=XBlockExpression)?
		public Group getGroup_6_1() { return cGroup_6_1; }

		//"convert"
		public Keyword getConvertKeyword_6_1_0() { return cConvertKeyword_6_1_0; }

		//convertBody=XBlockExpression
		public Assignment getConvertBodyAssignment_6_1_1() { return cConvertBodyAssignment_6_1_1; }

		//XBlockExpression
		public RuleCall getConvertBodyXBlockExpressionParserRuleCall_6_1_1_0() { return cConvertBodyXBlockExpressionParserRuleCall_6_1_1_0; }
	}

	public class XEnumElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XEnum");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAnnotationsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAnnotationsXAnnotationParserRuleCall_0_0 = (RuleCall)cAnnotationsAssignment_0.eContents().get(0);
		private final Keyword cEnumKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Assignment cLiteralsAssignment_4_0 = (Assignment)cGroup_4.eContents().get(0);
		private final RuleCall cLiteralsXEnumLiteralParserRuleCall_4_0_0 = (RuleCall)cLiteralsAssignment_4_0.eContents().get(0);
		private final Group cGroup_4_1 = (Group)cGroup_4.eContents().get(1);
		private final Keyword cCommaKeyword_4_1_0 = (Keyword)cGroup_4_1.eContents().get(0);
		private final Assignment cLiteralsAssignment_4_1_1 = (Assignment)cGroup_4_1.eContents().get(1);
		private final RuleCall cLiteralsXEnumLiteralParserRuleCall_4_1_1_0 = (RuleCall)cLiteralsAssignment_4_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//XEnum:
		//	annotations+=XAnnotation* "enum" name=ID "{" (literals+=XEnumLiteral (","? literals+=XEnumLiteral)*)? "}";
		public ParserRule getRule() { return rule; }

		//annotations+=XAnnotation* "enum" name=ID "{" (literals+=XEnumLiteral (","? literals+=XEnumLiteral)*)? "}"
		public Group getGroup() { return cGroup; }

		//annotations+=XAnnotation*
		public Assignment getAnnotationsAssignment_0() { return cAnnotationsAssignment_0; }

		//XAnnotation
		public RuleCall getAnnotationsXAnnotationParserRuleCall_0_0() { return cAnnotationsXAnnotationParserRuleCall_0_0; }

		//"enum"
		public Keyword getEnumKeyword_1() { return cEnumKeyword_1; }

		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }

		//(literals+=XEnumLiteral (","? literals+=XEnumLiteral)*)?
		public Group getGroup_4() { return cGroup_4; }

		//literals+=XEnumLiteral
		public Assignment getLiteralsAssignment_4_0() { return cLiteralsAssignment_4_0; }

		//XEnumLiteral
		public RuleCall getLiteralsXEnumLiteralParserRuleCall_4_0_0() { return cLiteralsXEnumLiteralParserRuleCall_4_0_0; }

		//(","? literals+=XEnumLiteral)*
		public Group getGroup_4_1() { return cGroup_4_1; }

		//","?
		public Keyword getCommaKeyword_4_1_0() { return cCommaKeyword_4_1_0; }

		//literals+=XEnumLiteral
		public Assignment getLiteralsAssignment_4_1_1() { return cLiteralsAssignment_4_1_1; }

		//XEnumLiteral
		public RuleCall getLiteralsXEnumLiteralParserRuleCall_4_1_1_0() { return cLiteralsXEnumLiteralParserRuleCall_4_1_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}

	public class XEnumLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XEnumLiteral");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAnnotationsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAnnotationsXAnnotationParserRuleCall_0_0 = (RuleCall)cAnnotationsAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cAsKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cLiteralAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cLiteralSTRINGTerminalRuleCall_2_1_0 = (RuleCall)cLiteralAssignment_2_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cEqualsSignKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cValueAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cValueINTTerminalRuleCall_3_1_0 = (RuleCall)cValueAssignment_3_1.eContents().get(0);
		
		//XEnumLiteral:
		//	annotations+=XAnnotation* name=ID ("as" literal=STRING)? ("=" value=INT)?;
		public ParserRule getRule() { return rule; }

		//annotations+=XAnnotation* name=ID ("as" literal=STRING)? ("=" value=INT)?
		public Group getGroup() { return cGroup; }

		//annotations+=XAnnotation*
		public Assignment getAnnotationsAssignment_0() { return cAnnotationsAssignment_0; }

		//XAnnotation
		public RuleCall getAnnotationsXAnnotationParserRuleCall_0_0() { return cAnnotationsXAnnotationParserRuleCall_0_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//("as" literal=STRING)?
		public Group getGroup_2() { return cGroup_2; }

		//"as"
		public Keyword getAsKeyword_2_0() { return cAsKeyword_2_0; }

		//literal=STRING
		public Assignment getLiteralAssignment_2_1() { return cLiteralAssignment_2_1; }

		//STRING
		public RuleCall getLiteralSTRINGTerminalRuleCall_2_1_0() { return cLiteralSTRINGTerminalRuleCall_2_1_0; }

		//("=" value=INT)?
		public Group getGroup_3() { return cGroup_3; }

		//"="
		public Keyword getEqualsSignKeyword_3_0() { return cEqualsSignKeyword_3_0; }

		//value=INT
		public Assignment getValueAssignment_3_1() { return cValueAssignment_3_1; }

		//INT
		public RuleCall getValueINTTerminalRuleCall_3_1_0() { return cValueINTTerminalRuleCall_3_1_0; }
	}

	public class XClassElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XClass");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cXClassAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cAnnotationsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cAnnotationsXAnnotationParserRuleCall_1_0 = (RuleCall)cAnnotationsAssignment_1.eContents().get(0);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Group cGroup_2_0 = (Group)cAlternatives_2.eContents().get(0);
		private final Assignment cAbstractAssignment_2_0_0 = (Assignment)cGroup_2_0.eContents().get(0);
		private final Keyword cAbstractAbstractKeyword_2_0_0_0 = (Keyword)cAbstractAssignment_2_0_0.eContents().get(0);
		private final Keyword cClassKeyword_2_0_1 = (Keyword)cGroup_2_0.eContents().get(1);
		private final Assignment cInterfaceAssignment_2_1 = (Assignment)cAlternatives_2.eContents().get(1);
		private final Keyword cInterfaceInterfaceKeyword_2_1_0 = (Keyword)cInterfaceAssignment_2_1.eContents().get(0);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameIDTerminalRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cLessThanSignKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cTypeParametersAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cTypeParametersXTypeParameterParserRuleCall_4_1_0 = (RuleCall)cTypeParametersAssignment_4_1.eContents().get(0);
		private final Group cGroup_4_2 = (Group)cGroup_4.eContents().get(2);
		private final Keyword cCommaKeyword_4_2_0 = (Keyword)cGroup_4_2.eContents().get(0);
		private final Assignment cTypeParametersAssignment_4_2_1 = (Assignment)cGroup_4_2.eContents().get(1);
		private final RuleCall cTypeParametersXTypeParameterParserRuleCall_4_2_1_0 = (RuleCall)cTypeParametersAssignment_4_2_1.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_4_3 = (Keyword)cGroup_4.eContents().get(3);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cExtendsKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cSuperTypesAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cSuperTypesXGenericTypeParserRuleCall_5_1_0 = (RuleCall)cSuperTypesAssignment_5_1.eContents().get(0);
		private final Group cGroup_5_2 = (Group)cGroup_5.eContents().get(2);
		private final Keyword cCommaKeyword_5_2_0 = (Keyword)cGroup_5_2.eContents().get(0);
		private final Assignment cSuperTypesAssignment_5_2_1 = (Assignment)cGroup_5_2.eContents().get(1);
		private final RuleCall cSuperTypesXGenericTypeParserRuleCall_5_2_1_0 = (RuleCall)cSuperTypesAssignment_5_2_1.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cWrapsKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cInstanceTypeNameAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cInstanceTypeNameQualifiedNameParserRuleCall_6_1_0 = (RuleCall)cInstanceTypeNameAssignment_6_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cMembersAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cMembersXMemberParserRuleCall_8_0 = (RuleCall)cMembersAssignment_8.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_9 = (Keyword)cGroup.eContents().get(9);
		
		//XClass:
		//	{XClass} annotations+=XAnnotation* (abstract?="abstract"? "class" | interface?="interface") name=ID ("<"
		//	typeParameters+=XTypeParameter ("," typeParameters+=XTypeParameter)* ">")? ("extends" superTypes+=XGenericType (","
		//	superTypes+=XGenericType)*)? ("wraps" instanceTypeName=QualifiedName)? "{" members+=XMember* "}";
		public ParserRule getRule() { return rule; }

		//{XClass} annotations+=XAnnotation* (abstract?="abstract"? "class" | interface?="interface") name=ID ("<"
		//typeParameters+=XTypeParameter ("," typeParameters+=XTypeParameter)* ">")? ("extends" superTypes+=XGenericType (","
		//superTypes+=XGenericType)*)? ("wraps" instanceTypeName=QualifiedName)? "{" members+=XMember* "}"
		public Group getGroup() { return cGroup; }

		//{XClass}
		public Action getXClassAction_0() { return cXClassAction_0; }

		//annotations+=XAnnotation*
		public Assignment getAnnotationsAssignment_1() { return cAnnotationsAssignment_1; }

		//XAnnotation
		public RuleCall getAnnotationsXAnnotationParserRuleCall_1_0() { return cAnnotationsXAnnotationParserRuleCall_1_0; }

		//abstract?="abstract"? "class" | interface?="interface"
		public Alternatives getAlternatives_2() { return cAlternatives_2; }

		//abstract?="abstract"? "class"
		public Group getGroup_2_0() { return cGroup_2_0; }

		//abstract?="abstract"?
		public Assignment getAbstractAssignment_2_0_0() { return cAbstractAssignment_2_0_0; }

		//"abstract"
		public Keyword getAbstractAbstractKeyword_2_0_0_0() { return cAbstractAbstractKeyword_2_0_0_0; }

		//"class"
		public Keyword getClassKeyword_2_0_1() { return cClassKeyword_2_0_1; }

		//interface?="interface"
		public Assignment getInterfaceAssignment_2_1() { return cInterfaceAssignment_2_1; }

		//"interface"
		public Keyword getInterfaceInterfaceKeyword_2_1_0() { return cInterfaceInterfaceKeyword_2_1_0; }

		//name=ID
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_3_0() { return cNameIDTerminalRuleCall_3_0; }

		//("<" typeParameters+=XTypeParameter ("," typeParameters+=XTypeParameter)* ">")?
		public Group getGroup_4() { return cGroup_4; }

		//"<"
		public Keyword getLessThanSignKeyword_4_0() { return cLessThanSignKeyword_4_0; }

		//typeParameters+=XTypeParameter
		public Assignment getTypeParametersAssignment_4_1() { return cTypeParametersAssignment_4_1; }

		//XTypeParameter
		public RuleCall getTypeParametersXTypeParameterParserRuleCall_4_1_0() { return cTypeParametersXTypeParameterParserRuleCall_4_1_0; }

		//("," typeParameters+=XTypeParameter)*
		public Group getGroup_4_2() { return cGroup_4_2; }

		//","
		public Keyword getCommaKeyword_4_2_0() { return cCommaKeyword_4_2_0; }

		//typeParameters+=XTypeParameter
		public Assignment getTypeParametersAssignment_4_2_1() { return cTypeParametersAssignment_4_2_1; }

		//XTypeParameter
		public RuleCall getTypeParametersXTypeParameterParserRuleCall_4_2_1_0() { return cTypeParametersXTypeParameterParserRuleCall_4_2_1_0; }

		//">"
		public Keyword getGreaterThanSignKeyword_4_3() { return cGreaterThanSignKeyword_4_3; }

		//("extends" superTypes+=XGenericType ("," superTypes+=XGenericType)*)?
		public Group getGroup_5() { return cGroup_5; }

		//"extends"
		public Keyword getExtendsKeyword_5_0() { return cExtendsKeyword_5_0; }

		//superTypes+=XGenericType
		public Assignment getSuperTypesAssignment_5_1() { return cSuperTypesAssignment_5_1; }

		//XGenericType
		public RuleCall getSuperTypesXGenericTypeParserRuleCall_5_1_0() { return cSuperTypesXGenericTypeParserRuleCall_5_1_0; }

		//("," superTypes+=XGenericType)*
		public Group getGroup_5_2() { return cGroup_5_2; }

		//","
		public Keyword getCommaKeyword_5_2_0() { return cCommaKeyword_5_2_0; }

		//superTypes+=XGenericType
		public Assignment getSuperTypesAssignment_5_2_1() { return cSuperTypesAssignment_5_2_1; }

		//XGenericType
		public RuleCall getSuperTypesXGenericTypeParserRuleCall_5_2_1_0() { return cSuperTypesXGenericTypeParserRuleCall_5_2_1_0; }

		//("wraps" instanceTypeName=QualifiedName)?
		public Group getGroup_6() { return cGroup_6; }

		//"wraps"
		public Keyword getWrapsKeyword_6_0() { return cWrapsKeyword_6_0; }

		//instanceTypeName=QualifiedName
		public Assignment getInstanceTypeNameAssignment_6_1() { return cInstanceTypeNameAssignment_6_1; }

		//QualifiedName
		public RuleCall getInstanceTypeNameQualifiedNameParserRuleCall_6_1_0() { return cInstanceTypeNameQualifiedNameParserRuleCall_6_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_7() { return cLeftCurlyBracketKeyword_7; }

		//members+=XMember*
		public Assignment getMembersAssignment_8() { return cMembersAssignment_8; }

		//XMember
		public RuleCall getMembersXMemberParserRuleCall_8_0() { return cMembersXMemberParserRuleCall_8_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_9() { return cRightCurlyBracketKeyword_9; }
	}

	public class XMemberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XMember");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cXOperationParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cXReferenceParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cXAttributeParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//XMember:
		//	XOperation | XReference | XAttribute;
		public ParserRule getRule() { return rule; }

		//XOperation | XReference | XAttribute
		public Alternatives getAlternatives() { return cAlternatives; }

		//XOperation
		public RuleCall getXOperationParserRuleCall_0() { return cXOperationParserRuleCall_0; }

		//XReference
		public RuleCall getXReferenceParserRuleCall_1() { return cXReferenceParserRuleCall_1; }

		//XAttribute
		public RuleCall getXAttributeParserRuleCall_2() { return cXAttributeParserRuleCall_2; }
	}

	public class XAttributeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XAttribute");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAnnotationsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAnnotationsXAnnotationParserRuleCall_0_0 = (RuleCall)cAnnotationsAssignment_0.eContents().get(0);
		private final UnorderedGroup cUnorderedGroup_1 = (UnorderedGroup)cGroup.eContents().get(1);
		private final Assignment cUnorderedAssignment_1_0 = (Assignment)cUnorderedGroup_1.eContents().get(0);
		private final Keyword cUnorderedUnorderedKeyword_1_0_0 = (Keyword)cUnorderedAssignment_1_0.eContents().get(0);
		private final Assignment cUniqueAssignment_1_1 = (Assignment)cUnorderedGroup_1.eContents().get(1);
		private final Keyword cUniqueUniqueKeyword_1_1_0 = (Keyword)cUniqueAssignment_1_1.eContents().get(0);
		private final Assignment cReadonlyAssignment_1_2 = (Assignment)cUnorderedGroup_1.eContents().get(2);
		private final Keyword cReadonlyReadonlyKeyword_1_2_0 = (Keyword)cReadonlyAssignment_1_2.eContents().get(0);
		private final Assignment cTransientAssignment_1_3 = (Assignment)cUnorderedGroup_1.eContents().get(3);
		private final Keyword cTransientTransientKeyword_1_3_0 = (Keyword)cTransientAssignment_1_3.eContents().get(0);
		private final Assignment cVolatileAssignment_1_4 = (Assignment)cUnorderedGroup_1.eContents().get(4);
		private final Keyword cVolatileVolatileKeyword_1_4_0 = (Keyword)cVolatileAssignment_1_4.eContents().get(0);
		private final Assignment cUnsettableAssignment_1_5 = (Assignment)cUnorderedGroup_1.eContents().get(5);
		private final Keyword cUnsettableUnsettableKeyword_1_5_0 = (Keyword)cUnsettableAssignment_1_5.eContents().get(0);
		private final Assignment cDerivedAssignment_1_6 = (Assignment)cUnorderedGroup_1.eContents().get(6);
		private final Keyword cDerivedDerivedKeyword_1_6_0 = (Keyword)cDerivedAssignment_1_6.eContents().get(0);
		private final Assignment cIDAssignment_1_7 = (Assignment)cUnorderedGroup_1.eContents().get(7);
		private final Keyword cIDIdKeyword_1_7_0 = (Keyword)cIDAssignment_1_7.eContents().get(0);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Group cGroup_2_0 = (Group)cAlternatives_2.eContents().get(0);
		private final Assignment cTypeAssignment_2_0_0 = (Assignment)cGroup_2_0.eContents().get(0);
		private final RuleCall cTypeXGenericTypeParserRuleCall_2_0_0_0 = (RuleCall)cTypeAssignment_2_0_0.eContents().get(0);
		private final Assignment cMultiplicityAssignment_2_0_1 = (Assignment)cGroup_2_0.eContents().get(1);
		private final RuleCall cMultiplicityXMultiplicityParserRuleCall_2_0_1_0 = (RuleCall)cMultiplicityAssignment_2_0_1.eContents().get(0);
		private final Keyword cVoidKeyword_2_1 = (Keyword)cAlternatives_2.eContents().get(1);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameIDTerminalRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cEqualsSignKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cDefaultValueLiteralAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cDefaultValueLiteralSTRINGTerminalRuleCall_4_1_0 = (RuleCall)cDefaultValueLiteralAssignment_4_1.eContents().get(0);
		private final UnorderedGroup cUnorderedGroup_5 = (UnorderedGroup)cGroup.eContents().get(5);
		private final Group cGroup_5_0 = (Group)cUnorderedGroup_5.eContents().get(0);
		private final Keyword cGetKeyword_5_0_0 = (Keyword)cGroup_5_0.eContents().get(0);
		private final Assignment cGetBodyAssignment_5_0_1 = (Assignment)cGroup_5_0.eContents().get(1);
		private final RuleCall cGetBodyXBlockExpressionParserRuleCall_5_0_1_0 = (RuleCall)cGetBodyAssignment_5_0_1.eContents().get(0);
		private final Group cGroup_5_1 = (Group)cUnorderedGroup_5.eContents().get(1);
		private final Keyword cSetKeyword_5_1_0 = (Keyword)cGroup_5_1.eContents().get(0);
		private final Assignment cSetBodyAssignment_5_1_1 = (Assignment)cGroup_5_1.eContents().get(1);
		private final RuleCall cSetBodyXBlockExpressionParserRuleCall_5_1_1_0 = (RuleCall)cSetBodyAssignment_5_1_1.eContents().get(0);
		private final Group cGroup_5_2 = (Group)cUnorderedGroup_5.eContents().get(2);
		private final Keyword cIsSetKeyword_5_2_0 = (Keyword)cGroup_5_2.eContents().get(0);
		private final Assignment cIsSetBodyAssignment_5_2_1 = (Assignment)cGroup_5_2.eContents().get(1);
		private final RuleCall cIsSetBodyXBlockExpressionParserRuleCall_5_2_1_0 = (RuleCall)cIsSetBodyAssignment_5_2_1.eContents().get(0);
		private final Group cGroup_5_3 = (Group)cUnorderedGroup_5.eContents().get(3);
		private final Keyword cUnsetKeyword_5_3_0 = (Keyword)cGroup_5_3.eContents().get(0);
		private final Assignment cUnsetBodyAssignment_5_3_1 = (Assignment)cGroup_5_3.eContents().get(1);
		private final RuleCall cUnsetBodyXBlockExpressionParserRuleCall_5_3_1_0 = (RuleCall)cUnsetBodyAssignment_5_3_1.eContents().get(0);
		
		//XAttribute:
		//	annotations+=XAnnotation* (unordered?="unordered"? & unique?="unique"? & readonly?="readonly"? &
		//	transient?="transient"? & volatile?="volatile"? & unsettable?="unsettable"? & derived?="derived"? & iD?="id"?)
		//	(type=XGenericType multiplicity=XMultiplicity? | "void") name=ID ("=" defaultValueLiteral=STRING)? / *
		//	 * In scope for getBody should be what's visible in AbcImpl
		//	 * and 'this' will denote an instance of the feature's type.
		//	 * The block expression must yield a value of the feature's type.
		//	 * / (("get" getBody=XBlockExpression)? & ("set" setBody=XBlockExpression)? & ("isSet" isSetBody=XBlockExpression)? &
		//	("unset" unsetBody=XBlockExpression)?);
		public ParserRule getRule() { return rule; }

		//annotations+=XAnnotation* (unordered?="unordered"? & unique?="unique"? & readonly?="readonly"? & transient?="transient"?
		//& volatile?="volatile"? & unsettable?="unsettable"? & derived?="derived"? & iD?="id"?) (type=XGenericType
		//multiplicity=XMultiplicity? | "void") name=ID ("=" defaultValueLiteral=STRING)? / *
		//	 * In scope for getBody should be what's visible in AbcImpl
		//	 * and 'this' will denote an instance of the feature's type.
		//	 * The block expression must yield a value of the feature's type.
		//	 * / (("get" getBody=XBlockExpression)? & ("set" setBody=XBlockExpression)? & ("isSet" isSetBody=XBlockExpression)? &
		//("unset" unsetBody=XBlockExpression)?)
		public Group getGroup() { return cGroup; }

		//annotations+=XAnnotation*
		public Assignment getAnnotationsAssignment_0() { return cAnnotationsAssignment_0; }

		//XAnnotation
		public RuleCall getAnnotationsXAnnotationParserRuleCall_0_0() { return cAnnotationsXAnnotationParserRuleCall_0_0; }

		//unordered?="unordered"? & unique?="unique"? & readonly?="readonly"? & transient?="transient"? & volatile?="volatile"? &
		//unsettable?="unsettable"? & derived?="derived"? & iD?="id"?
		public UnorderedGroup getUnorderedGroup_1() { return cUnorderedGroup_1; }

		//unordered?="unordered"?
		public Assignment getUnorderedAssignment_1_0() { return cUnorderedAssignment_1_0; }

		//"unordered"
		public Keyword getUnorderedUnorderedKeyword_1_0_0() { return cUnorderedUnorderedKeyword_1_0_0; }

		//unique?="unique"?
		public Assignment getUniqueAssignment_1_1() { return cUniqueAssignment_1_1; }

		//"unique"
		public Keyword getUniqueUniqueKeyword_1_1_0() { return cUniqueUniqueKeyword_1_1_0; }

		//readonly?="readonly"?
		public Assignment getReadonlyAssignment_1_2() { return cReadonlyAssignment_1_2; }

		//"readonly"
		public Keyword getReadonlyReadonlyKeyword_1_2_0() { return cReadonlyReadonlyKeyword_1_2_0; }

		//transient?="transient"?
		public Assignment getTransientAssignment_1_3() { return cTransientAssignment_1_3; }

		//"transient"
		public Keyword getTransientTransientKeyword_1_3_0() { return cTransientTransientKeyword_1_3_0; }

		//volatile?="volatile"?
		public Assignment getVolatileAssignment_1_4() { return cVolatileAssignment_1_4; }

		//"volatile"
		public Keyword getVolatileVolatileKeyword_1_4_0() { return cVolatileVolatileKeyword_1_4_0; }

		//unsettable?="unsettable"?
		public Assignment getUnsettableAssignment_1_5() { return cUnsettableAssignment_1_5; }

		//"unsettable"
		public Keyword getUnsettableUnsettableKeyword_1_5_0() { return cUnsettableUnsettableKeyword_1_5_0; }

		//derived?="derived"?
		public Assignment getDerivedAssignment_1_6() { return cDerivedAssignment_1_6; }

		//"derived"
		public Keyword getDerivedDerivedKeyword_1_6_0() { return cDerivedDerivedKeyword_1_6_0; }

		//iD?="id"?
		public Assignment getIDAssignment_1_7() { return cIDAssignment_1_7; }

		//"id"
		public Keyword getIDIdKeyword_1_7_0() { return cIDIdKeyword_1_7_0; }

		//type=XGenericType multiplicity=XMultiplicity? | "void"
		public Alternatives getAlternatives_2() { return cAlternatives_2; }

		//type=XGenericType multiplicity=XMultiplicity?
		public Group getGroup_2_0() { return cGroup_2_0; }

		//type=XGenericType
		public Assignment getTypeAssignment_2_0_0() { return cTypeAssignment_2_0_0; }

		//XGenericType
		public RuleCall getTypeXGenericTypeParserRuleCall_2_0_0_0() { return cTypeXGenericTypeParserRuleCall_2_0_0_0; }

		//multiplicity=XMultiplicity?
		public Assignment getMultiplicityAssignment_2_0_1() { return cMultiplicityAssignment_2_0_1; }

		//XMultiplicity
		public RuleCall getMultiplicityXMultiplicityParserRuleCall_2_0_1_0() { return cMultiplicityXMultiplicityParserRuleCall_2_0_1_0; }

		//"void"
		public Keyword getVoidKeyword_2_1() { return cVoidKeyword_2_1; }

		//name=ID
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_3_0() { return cNameIDTerminalRuleCall_3_0; }

		//("=" defaultValueLiteral=STRING)?
		public Group getGroup_4() { return cGroup_4; }

		//"="
		public Keyword getEqualsSignKeyword_4_0() { return cEqualsSignKeyword_4_0; }

		//defaultValueLiteral=STRING
		public Assignment getDefaultValueLiteralAssignment_4_1() { return cDefaultValueLiteralAssignment_4_1; }

		//STRING
		public RuleCall getDefaultValueLiteralSTRINGTerminalRuleCall_4_1_0() { return cDefaultValueLiteralSTRINGTerminalRuleCall_4_1_0; }

		//("get" getBody=XBlockExpression)? & ("set" setBody=XBlockExpression)? & ("isSet" isSetBody=XBlockExpression)? & ("unset"
		//unsetBody=XBlockExpression)?
		public UnorderedGroup getUnorderedGroup_5() { return cUnorderedGroup_5; }

		//("get" getBody=XBlockExpression)?
		public Group getGroup_5_0() { return cGroup_5_0; }

		//"get"
		public Keyword getGetKeyword_5_0_0() { return cGetKeyword_5_0_0; }

		//getBody=XBlockExpression
		public Assignment getGetBodyAssignment_5_0_1() { return cGetBodyAssignment_5_0_1; }

		//XBlockExpression
		public RuleCall getGetBodyXBlockExpressionParserRuleCall_5_0_1_0() { return cGetBodyXBlockExpressionParserRuleCall_5_0_1_0; }

		//("set" setBody=XBlockExpression)?
		public Group getGroup_5_1() { return cGroup_5_1; }

		//"set"
		public Keyword getSetKeyword_5_1_0() { return cSetKeyword_5_1_0; }

		//setBody=XBlockExpression
		public Assignment getSetBodyAssignment_5_1_1() { return cSetBodyAssignment_5_1_1; }

		//XBlockExpression
		public RuleCall getSetBodyXBlockExpressionParserRuleCall_5_1_1_0() { return cSetBodyXBlockExpressionParserRuleCall_5_1_1_0; }

		//("isSet" isSetBody=XBlockExpression)?
		public Group getGroup_5_2() { return cGroup_5_2; }

		//"isSet"
		public Keyword getIsSetKeyword_5_2_0() { return cIsSetKeyword_5_2_0; }

		//isSetBody=XBlockExpression
		public Assignment getIsSetBodyAssignment_5_2_1() { return cIsSetBodyAssignment_5_2_1; }

		//XBlockExpression
		public RuleCall getIsSetBodyXBlockExpressionParserRuleCall_5_2_1_0() { return cIsSetBodyXBlockExpressionParserRuleCall_5_2_1_0; }

		//("unset" unsetBody=XBlockExpression)?
		public Group getGroup_5_3() { return cGroup_5_3; }

		//"unset"
		public Keyword getUnsetKeyword_5_3_0() { return cUnsetKeyword_5_3_0; }

		//unsetBody=XBlockExpression
		public Assignment getUnsetBodyAssignment_5_3_1() { return cUnsetBodyAssignment_5_3_1; }

		//XBlockExpression
		public RuleCall getUnsetBodyXBlockExpressionParserRuleCall_5_3_1_0() { return cUnsetBodyXBlockExpressionParserRuleCall_5_3_1_0; }
	}

	public class XReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XReference");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAnnotationsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAnnotationsXAnnotationParserRuleCall_0_0 = (RuleCall)cAnnotationsAssignment_0.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final UnorderedGroup cUnorderedGroup_1_0 = (UnorderedGroup)cAlternatives_1.eContents().get(0);
		private final Assignment cResolveProxiesAssignment_1_0_0 = (Assignment)cUnorderedGroup_1_0.eContents().get(0);
		private final Keyword cResolveProxiesResolvingKeyword_1_0_0_0 = (Keyword)cResolveProxiesAssignment_1_0_0.eContents().get(0);
		private final Alternatives cAlternatives_1_0_1 = (Alternatives)cUnorderedGroup_1_0.eContents().get(1);
		private final Assignment cContainmentAssignment_1_0_1_0 = (Assignment)cAlternatives_1_0_1.eContents().get(0);
		private final Keyword cContainmentContainsKeyword_1_0_1_0_0 = (Keyword)cContainmentAssignment_1_0_1_0.eContents().get(0);
		private final Assignment cContainerAssignment_1_0_1_1 = (Assignment)cAlternatives_1_0_1.eContents().get(1);
		private final Keyword cContainerContainerKeyword_1_0_1_1_0 = (Keyword)cContainerAssignment_1_0_1_1.eContents().get(0);
		private final UnorderedGroup cUnorderedGroup_1_1 = (UnorderedGroup)cAlternatives_1.eContents().get(1);
		private final Assignment cLocalAssignment_1_1_0 = (Assignment)cUnorderedGroup_1_1.eContents().get(0);
		private final Keyword cLocalLocalKeyword_1_1_0_0 = (Keyword)cLocalAssignment_1_1_0.eContents().get(0);
		private final Keyword cRefersKeyword_1_1_1 = (Keyword)cUnorderedGroup_1_1.eContents().get(1);
		private final UnorderedGroup cUnorderedGroup_2 = (UnorderedGroup)cGroup.eContents().get(2);
		private final Assignment cUnorderedAssignment_2_0 = (Assignment)cUnorderedGroup_2.eContents().get(0);
		private final Keyword cUnorderedUnorderedKeyword_2_0_0 = (Keyword)cUnorderedAssignment_2_0.eContents().get(0);
		private final Assignment cUniqueAssignment_2_1 = (Assignment)cUnorderedGroup_2.eContents().get(1);
		private final Keyword cUniqueUniqueKeyword_2_1_0 = (Keyword)cUniqueAssignment_2_1.eContents().get(0);
		private final Assignment cReadonlyAssignment_2_2 = (Assignment)cUnorderedGroup_2.eContents().get(2);
		private final Keyword cReadonlyReadonlyKeyword_2_2_0 = (Keyword)cReadonlyAssignment_2_2.eContents().get(0);
		private final Assignment cTransientAssignment_2_3 = (Assignment)cUnorderedGroup_2.eContents().get(3);
		private final Keyword cTransientTransientKeyword_2_3_0 = (Keyword)cTransientAssignment_2_3.eContents().get(0);
		private final Assignment cVolatileAssignment_2_4 = (Assignment)cUnorderedGroup_2.eContents().get(4);
		private final Keyword cVolatileVolatileKeyword_2_4_0 = (Keyword)cVolatileAssignment_2_4.eContents().get(0);
		private final Assignment cUnsettableAssignment_2_5 = (Assignment)cUnorderedGroup_2.eContents().get(5);
		private final Keyword cUnsettableUnsettableKeyword_2_5_0 = (Keyword)cUnsettableAssignment_2_5.eContents().get(0);
		private final Assignment cDerivedAssignment_2_6 = (Assignment)cUnorderedGroup_2.eContents().get(6);
		private final Keyword cDerivedDerivedKeyword_2_6_0 = (Keyword)cDerivedAssignment_2_6.eContents().get(0);
		private final Assignment cTypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTypeXGenericTypeParserRuleCall_3_0 = (RuleCall)cTypeAssignment_3.eContents().get(0);
		private final Assignment cMultiplicityAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cMultiplicityXMultiplicityParserRuleCall_4_0 = (RuleCall)cMultiplicityAssignment_4.eContents().get(0);
		private final Assignment cNameAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cNameIDTerminalRuleCall_5_0 = (RuleCall)cNameAssignment_5.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cOppositeKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cOppositeAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final CrossReference cOppositeGenFeatureCrossReference_6_1_0 = (CrossReference)cOppositeAssignment_6_1.eContents().get(0);
		private final RuleCall cOppositeGenFeatureValidIDParserRuleCall_6_1_0_1 = (RuleCall)cOppositeGenFeatureCrossReference_6_1_0.eContents().get(1);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Keyword cKeysKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Assignment cKeysAssignment_7_1 = (Assignment)cGroup_7.eContents().get(1);
		private final CrossReference cKeysGenFeatureCrossReference_7_1_0 = (CrossReference)cKeysAssignment_7_1.eContents().get(0);
		private final RuleCall cKeysGenFeatureValidIDParserRuleCall_7_1_0_1 = (RuleCall)cKeysGenFeatureCrossReference_7_1_0.eContents().get(1);
		private final Group cGroup_7_2 = (Group)cGroup_7.eContents().get(2);
		private final Keyword cCommaKeyword_7_2_0 = (Keyword)cGroup_7_2.eContents().get(0);
		private final Assignment cKeysAssignment_7_2_1 = (Assignment)cGroup_7_2.eContents().get(1);
		private final CrossReference cKeysGenFeatureCrossReference_7_2_1_0 = (CrossReference)cKeysAssignment_7_2_1.eContents().get(0);
		private final RuleCall cKeysGenFeatureValidIDParserRuleCall_7_2_1_0_1 = (RuleCall)cKeysGenFeatureCrossReference_7_2_1_0.eContents().get(1);
		private final UnorderedGroup cUnorderedGroup_8 = (UnorderedGroup)cGroup.eContents().get(8);
		private final Group cGroup_8_0 = (Group)cUnorderedGroup_8.eContents().get(0);
		private final Keyword cGetKeyword_8_0_0 = (Keyword)cGroup_8_0.eContents().get(0);
		private final Assignment cGetBodyAssignment_8_0_1 = (Assignment)cGroup_8_0.eContents().get(1);
		private final RuleCall cGetBodyXBlockExpressionParserRuleCall_8_0_1_0 = (RuleCall)cGetBodyAssignment_8_0_1.eContents().get(0);
		private final Group cGroup_8_1 = (Group)cUnorderedGroup_8.eContents().get(1);
		private final Keyword cSetKeyword_8_1_0 = (Keyword)cGroup_8_1.eContents().get(0);
		private final Assignment cSetBodyAssignment_8_1_1 = (Assignment)cGroup_8_1.eContents().get(1);
		private final RuleCall cSetBodyXBlockExpressionParserRuleCall_8_1_1_0 = (RuleCall)cSetBodyAssignment_8_1_1.eContents().get(0);
		private final Group cGroup_8_2 = (Group)cUnorderedGroup_8.eContents().get(2);
		private final Keyword cIsSetKeyword_8_2_0 = (Keyword)cGroup_8_2.eContents().get(0);
		private final Assignment cIsSetBodyAssignment_8_2_1 = (Assignment)cGroup_8_2.eContents().get(1);
		private final RuleCall cIsSetBodyXBlockExpressionParserRuleCall_8_2_1_0 = (RuleCall)cIsSetBodyAssignment_8_2_1.eContents().get(0);
		private final Group cGroup_8_3 = (Group)cUnorderedGroup_8.eContents().get(3);
		private final Keyword cUnsetKeyword_8_3_0 = (Keyword)cGroup_8_3.eContents().get(0);
		private final Assignment cUnsetBodyAssignment_8_3_1 = (Assignment)cGroup_8_3.eContents().get(1);
		private final RuleCall cUnsetBodyXBlockExpressionParserRuleCall_8_3_1_0 = (RuleCall)cUnsetBodyAssignment_8_3_1.eContents().get(0);
		
		//XReference:
		//	annotations+=XAnnotation* (resolveProxies?="resolving"? & (containment?="contains" | container?="container") |
		//	local?="local"? & "refers") (unordered?="unordered"? & unique?="unique"? & readonly?="readonly"? &
		//	transient?="transient"? & volatile?="volatile"? & unsettable?="unsettable"? & derived?="derived"?) type=XGenericType
		//	multiplicity=XMultiplicity? name=ID ("opposite" opposite=[genmodel::GenFeature|ValidID])? ("keys"
		//	keys+=[genmodel::GenFeature|ValidID] ("," keys+=[genmodel::GenFeature|ValidID])*)? / *
		//	 * In scope for getBody should be what's visible in AbcImpl
		//	 * and 'this' will denote an instance of the feature's type.
		//	 * The block expression must yield a value of the feature's type.
		//	 * / (("get" getBody=XBlockExpression)? & ("set" setBody=XBlockExpression)? & ("isSet" isSetBody=XBlockExpression)? &
		//	("unset" unsetBody=XBlockExpression)?);
		public ParserRule getRule() { return rule; }

		//annotations+=XAnnotation* (resolveProxies?="resolving"? & (containment?="contains" | container?="container") |
		//local?="local"? & "refers") (unordered?="unordered"? & unique?="unique"? & readonly?="readonly"? &
		//transient?="transient"? & volatile?="volatile"? & unsettable?="unsettable"? & derived?="derived"?) type=XGenericType
		//multiplicity=XMultiplicity? name=ID ("opposite" opposite=[genmodel::GenFeature|ValidID])? ("keys"
		//keys+=[genmodel::GenFeature|ValidID] ("," keys+=[genmodel::GenFeature|ValidID])*)? / *
		//	 * In scope for getBody should be what's visible in AbcImpl
		//	 * and 'this' will denote an instance of the feature's type.
		//	 * The block expression must yield a value of the feature's type.
		//	 * / (("get" getBody=XBlockExpression)? & ("set" setBody=XBlockExpression)? & ("isSet" isSetBody=XBlockExpression)? &
		//("unset" unsetBody=XBlockExpression)?)
		public Group getGroup() { return cGroup; }

		//annotations+=XAnnotation*
		public Assignment getAnnotationsAssignment_0() { return cAnnotationsAssignment_0; }

		//XAnnotation
		public RuleCall getAnnotationsXAnnotationParserRuleCall_0_0() { return cAnnotationsXAnnotationParserRuleCall_0_0; }

		//resolveProxies?="resolving"? & (containment?="contains" | container?="container") | local?="local"? & "refers"
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//resolveProxies?="resolving"? & (containment?="contains" | container?="container")
		public UnorderedGroup getUnorderedGroup_1_0() { return cUnorderedGroup_1_0; }

		//resolveProxies?="resolving"?
		public Assignment getResolveProxiesAssignment_1_0_0() { return cResolveProxiesAssignment_1_0_0; }

		//"resolving"
		public Keyword getResolveProxiesResolvingKeyword_1_0_0_0() { return cResolveProxiesResolvingKeyword_1_0_0_0; }

		//containment?="contains" | container?="container"
		public Alternatives getAlternatives_1_0_1() { return cAlternatives_1_0_1; }

		//containment?="contains"
		public Assignment getContainmentAssignment_1_0_1_0() { return cContainmentAssignment_1_0_1_0; }

		//"contains"
		public Keyword getContainmentContainsKeyword_1_0_1_0_0() { return cContainmentContainsKeyword_1_0_1_0_0; }

		//container?="container"
		public Assignment getContainerAssignment_1_0_1_1() { return cContainerAssignment_1_0_1_1; }

		//"container"
		public Keyword getContainerContainerKeyword_1_0_1_1_0() { return cContainerContainerKeyword_1_0_1_1_0; }

		//local?="local"? & "refers"
		public UnorderedGroup getUnorderedGroup_1_1() { return cUnorderedGroup_1_1; }

		//local?="local"?
		public Assignment getLocalAssignment_1_1_0() { return cLocalAssignment_1_1_0; }

		//"local"
		public Keyword getLocalLocalKeyword_1_1_0_0() { return cLocalLocalKeyword_1_1_0_0; }

		//"refers"
		public Keyword getRefersKeyword_1_1_1() { return cRefersKeyword_1_1_1; }

		//unordered?="unordered"? & unique?="unique"? & readonly?="readonly"? & transient?="transient"? & volatile?="volatile"? &
		//unsettable?="unsettable"? & derived?="derived"?
		public UnorderedGroup getUnorderedGroup_2() { return cUnorderedGroup_2; }

		//unordered?="unordered"?
		public Assignment getUnorderedAssignment_2_0() { return cUnorderedAssignment_2_0; }

		//"unordered"
		public Keyword getUnorderedUnorderedKeyword_2_0_0() { return cUnorderedUnorderedKeyword_2_0_0; }

		//unique?="unique"?
		public Assignment getUniqueAssignment_2_1() { return cUniqueAssignment_2_1; }

		//"unique"
		public Keyword getUniqueUniqueKeyword_2_1_0() { return cUniqueUniqueKeyword_2_1_0; }

		//readonly?="readonly"?
		public Assignment getReadonlyAssignment_2_2() { return cReadonlyAssignment_2_2; }

		//"readonly"
		public Keyword getReadonlyReadonlyKeyword_2_2_0() { return cReadonlyReadonlyKeyword_2_2_0; }

		//transient?="transient"?
		public Assignment getTransientAssignment_2_3() { return cTransientAssignment_2_3; }

		//"transient"
		public Keyword getTransientTransientKeyword_2_3_0() { return cTransientTransientKeyword_2_3_0; }

		//volatile?="volatile"?
		public Assignment getVolatileAssignment_2_4() { return cVolatileAssignment_2_4; }

		//"volatile"
		public Keyword getVolatileVolatileKeyword_2_4_0() { return cVolatileVolatileKeyword_2_4_0; }

		//unsettable?="unsettable"?
		public Assignment getUnsettableAssignment_2_5() { return cUnsettableAssignment_2_5; }

		//"unsettable"
		public Keyword getUnsettableUnsettableKeyword_2_5_0() { return cUnsettableUnsettableKeyword_2_5_0; }

		//derived?="derived"?
		public Assignment getDerivedAssignment_2_6() { return cDerivedAssignment_2_6; }

		//"derived"
		public Keyword getDerivedDerivedKeyword_2_6_0() { return cDerivedDerivedKeyword_2_6_0; }

		//type=XGenericType
		public Assignment getTypeAssignment_3() { return cTypeAssignment_3; }

		//XGenericType
		public RuleCall getTypeXGenericTypeParserRuleCall_3_0() { return cTypeXGenericTypeParserRuleCall_3_0; }

		//multiplicity=XMultiplicity?
		public Assignment getMultiplicityAssignment_4() { return cMultiplicityAssignment_4; }

		//XMultiplicity
		public RuleCall getMultiplicityXMultiplicityParserRuleCall_4_0() { return cMultiplicityXMultiplicityParserRuleCall_4_0; }

		//name=ID
		public Assignment getNameAssignment_5() { return cNameAssignment_5; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_5_0() { return cNameIDTerminalRuleCall_5_0; }

		//("opposite" opposite=[genmodel::GenFeature|ValidID])?
		public Group getGroup_6() { return cGroup_6; }

		//"opposite"
		public Keyword getOppositeKeyword_6_0() { return cOppositeKeyword_6_0; }

		//opposite=[genmodel::GenFeature|ValidID]
		public Assignment getOppositeAssignment_6_1() { return cOppositeAssignment_6_1; }

		//[genmodel::GenFeature|ValidID]
		public CrossReference getOppositeGenFeatureCrossReference_6_1_0() { return cOppositeGenFeatureCrossReference_6_1_0; }

		//ValidID
		public RuleCall getOppositeGenFeatureValidIDParserRuleCall_6_1_0_1() { return cOppositeGenFeatureValidIDParserRuleCall_6_1_0_1; }

		//("keys" keys+=[genmodel::GenFeature|ValidID] ("," keys+=[genmodel::GenFeature|ValidID])*)?
		public Group getGroup_7() { return cGroup_7; }

		//"keys"
		public Keyword getKeysKeyword_7_0() { return cKeysKeyword_7_0; }

		//keys+=[genmodel::GenFeature|ValidID]
		public Assignment getKeysAssignment_7_1() { return cKeysAssignment_7_1; }

		//[genmodel::GenFeature|ValidID]
		public CrossReference getKeysGenFeatureCrossReference_7_1_0() { return cKeysGenFeatureCrossReference_7_1_0; }

		//ValidID
		public RuleCall getKeysGenFeatureValidIDParserRuleCall_7_1_0_1() { return cKeysGenFeatureValidIDParserRuleCall_7_1_0_1; }

		//("," keys+=[genmodel::GenFeature|ValidID])*
		public Group getGroup_7_2() { return cGroup_7_2; }

		//","
		public Keyword getCommaKeyword_7_2_0() { return cCommaKeyword_7_2_0; }

		//keys+=[genmodel::GenFeature|ValidID]
		public Assignment getKeysAssignment_7_2_1() { return cKeysAssignment_7_2_1; }

		//[genmodel::GenFeature|ValidID]
		public CrossReference getKeysGenFeatureCrossReference_7_2_1_0() { return cKeysGenFeatureCrossReference_7_2_1_0; }

		//ValidID
		public RuleCall getKeysGenFeatureValidIDParserRuleCall_7_2_1_0_1() { return cKeysGenFeatureValidIDParserRuleCall_7_2_1_0_1; }

		//("get" getBody=XBlockExpression)? & ("set" setBody=XBlockExpression)? & ("isSet" isSetBody=XBlockExpression)? & ("unset"
		//unsetBody=XBlockExpression)?
		public UnorderedGroup getUnorderedGroup_8() { return cUnorderedGroup_8; }

		//("get" getBody=XBlockExpression)?
		public Group getGroup_8_0() { return cGroup_8_0; }

		//"get"
		public Keyword getGetKeyword_8_0_0() { return cGetKeyword_8_0_0; }

		//getBody=XBlockExpression
		public Assignment getGetBodyAssignment_8_0_1() { return cGetBodyAssignment_8_0_1; }

		//XBlockExpression
		public RuleCall getGetBodyXBlockExpressionParserRuleCall_8_0_1_0() { return cGetBodyXBlockExpressionParserRuleCall_8_0_1_0; }

		//("set" setBody=XBlockExpression)?
		public Group getGroup_8_1() { return cGroup_8_1; }

		//"set"
		public Keyword getSetKeyword_8_1_0() { return cSetKeyword_8_1_0; }

		//setBody=XBlockExpression
		public Assignment getSetBodyAssignment_8_1_1() { return cSetBodyAssignment_8_1_1; }

		//XBlockExpression
		public RuleCall getSetBodyXBlockExpressionParserRuleCall_8_1_1_0() { return cSetBodyXBlockExpressionParserRuleCall_8_1_1_0; }

		//("isSet" isSetBody=XBlockExpression)?
		public Group getGroup_8_2() { return cGroup_8_2; }

		//"isSet"
		public Keyword getIsSetKeyword_8_2_0() { return cIsSetKeyword_8_2_0; }

		//isSetBody=XBlockExpression
		public Assignment getIsSetBodyAssignment_8_2_1() { return cIsSetBodyAssignment_8_2_1; }

		//XBlockExpression
		public RuleCall getIsSetBodyXBlockExpressionParserRuleCall_8_2_1_0() { return cIsSetBodyXBlockExpressionParserRuleCall_8_2_1_0; }

		//("unset" unsetBody=XBlockExpression)?
		public Group getGroup_8_3() { return cGroup_8_3; }

		//"unset"
		public Keyword getUnsetKeyword_8_3_0() { return cUnsetKeyword_8_3_0; }

		//unsetBody=XBlockExpression
		public Assignment getUnsetBodyAssignment_8_3_1() { return cUnsetBodyAssignment_8_3_1; }

		//XBlockExpression
		public RuleCall getUnsetBodyXBlockExpressionParserRuleCall_8_3_1_0() { return cUnsetBodyXBlockExpressionParserRuleCall_8_3_1_0; }
	}

	public class XOperationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XOperation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAnnotationsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAnnotationsXAnnotationParserRuleCall_0_0 = (RuleCall)cAnnotationsAssignment_0.eContents().get(0);
		private final Keyword cOpKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Group cGroup_2_0 = (Group)cAlternatives_2.eContents().get(0);
		private final Assignment cUnorderedAssignment_2_0_0 = (Assignment)cGroup_2_0.eContents().get(0);
		private final Keyword cUnorderedUnorderedKeyword_2_0_0_0 = (Keyword)cUnorderedAssignment_2_0_0.eContents().get(0);
		private final Assignment cUniqueAssignment_2_0_1 = (Assignment)cGroup_2_0.eContents().get(1);
		private final Keyword cUniqueUniqueKeyword_2_0_1_0 = (Keyword)cUniqueAssignment_2_0_1.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cAlternatives_2.eContents().get(1);
		private final Assignment cUniqueAssignment_2_1_0 = (Assignment)cGroup_2_1.eContents().get(0);
		private final Keyword cUniqueUniqueKeyword_2_1_0_0 = (Keyword)cUniqueAssignment_2_1_0.eContents().get(0);
		private final Assignment cUnorderedAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final Keyword cUnorderedUnorderedKeyword_2_1_1_0 = (Keyword)cUnorderedAssignment_2_1_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cLessThanSignKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cTypeParametersAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cTypeParametersXTypeParameterParserRuleCall_3_1_0 = (RuleCall)cTypeParametersAssignment_3_1.eContents().get(0);
		private final Group cGroup_3_2 = (Group)cGroup_3.eContents().get(2);
		private final Keyword cCommaKeyword_3_2_0 = (Keyword)cGroup_3_2.eContents().get(0);
		private final Assignment cTypeParametersAssignment_3_2_1 = (Assignment)cGroup_3_2.eContents().get(1);
		private final RuleCall cTypeParametersXTypeParameterParserRuleCall_3_2_1_0 = (RuleCall)cTypeParametersAssignment_3_2_1.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_3_3 = (Keyword)cGroup_3.eContents().get(3);
		private final Alternatives cAlternatives_4 = (Alternatives)cGroup.eContents().get(4);
		private final Assignment cTypeAssignment_4_0 = (Assignment)cAlternatives_4.eContents().get(0);
		private final RuleCall cTypeXGenericTypeParserRuleCall_4_0_0 = (RuleCall)cTypeAssignment_4_0.eContents().get(0);
		private final Keyword cVoidKeyword_4_1 = (Keyword)cAlternatives_4.eContents().get(1);
		private final Assignment cMultiplicityAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cMultiplicityXMultiplicityParserRuleCall_5_0 = (RuleCall)cMultiplicityAssignment_5.eContents().get(0);
		private final Assignment cNameAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cNameIDTerminalRuleCall_6_0 = (RuleCall)cNameAssignment_6.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Group cGroup_8 = (Group)cGroup.eContents().get(8);
		private final Assignment cParametersAssignment_8_0 = (Assignment)cGroup_8.eContents().get(0);
		private final RuleCall cParametersXParameterParserRuleCall_8_0_0 = (RuleCall)cParametersAssignment_8_0.eContents().get(0);
		private final Group cGroup_8_1 = (Group)cGroup_8.eContents().get(1);
		private final Keyword cCommaKeyword_8_1_0 = (Keyword)cGroup_8_1.eContents().get(0);
		private final Assignment cParametersAssignment_8_1_1 = (Assignment)cGroup_8_1.eContents().get(1);
		private final RuleCall cParametersXParameterParserRuleCall_8_1_1_0 = (RuleCall)cParametersAssignment_8_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_9 = (Keyword)cGroup.eContents().get(9);
		private final Group cGroup_10 = (Group)cGroup.eContents().get(10);
		private final Keyword cThrowsKeyword_10_0 = (Keyword)cGroup_10.eContents().get(0);
		private final Assignment cExceptionsAssignment_10_1 = (Assignment)cGroup_10.eContents().get(1);
		private final RuleCall cExceptionsXGenericTypeParserRuleCall_10_1_0 = (RuleCall)cExceptionsAssignment_10_1.eContents().get(0);
		private final Group cGroup_10_2 = (Group)cGroup_10.eContents().get(2);
		private final Keyword cCommaKeyword_10_2_0 = (Keyword)cGroup_10_2.eContents().get(0);
		private final Assignment cExceptionsAssignment_10_2_1 = (Assignment)cGroup_10_2.eContents().get(1);
		private final RuleCall cExceptionsXGenericTypeParserRuleCall_10_2_1_0 = (RuleCall)cExceptionsAssignment_10_2_1.eContents().get(0);
		private final Assignment cBodyAssignment_11 = (Assignment)cGroup.eContents().get(11);
		private final RuleCall cBodyXBlockExpressionParserRuleCall_11_0 = (RuleCall)cBodyAssignment_11.eContents().get(0);
		
		//XOperation:
		//	annotations+=XAnnotation* "op" (unordered?="unordered" unique?="unique"? | unique?="unique" unordered?="unordered"?)?
		//	("<" typeParameters+=XTypeParameter ("," typeParameters+=XTypeParameter)* ">")? (type=XGenericType | "void")
		//	multiplicity=XMultiplicity? name=ID "(" (parameters+=XParameter ("," parameters+=XParameter)*)? ")" ("throws"
		//	exceptions+=XGenericType ("," exceptions+=XGenericType)*)? / *
		//	 * This is the logic for the operation.
		//	 * How are we going to resolve all references that are in scope for Xbase language?
		//	 * Will things like variables that are actually there in generated in the Impl class be accessible directly?
		//	 * / body=XBlockExpression?;
		public ParserRule getRule() { return rule; }

		//annotations+=XAnnotation* "op" (unordered?="unordered" unique?="unique"? | unique?="unique" unordered?="unordered"?)?
		//("<" typeParameters+=XTypeParameter ("," typeParameters+=XTypeParameter)* ">")? (type=XGenericType | "void")
		//multiplicity=XMultiplicity? name=ID "(" (parameters+=XParameter ("," parameters+=XParameter)*)? ")" ("throws"
		//exceptions+=XGenericType ("," exceptions+=XGenericType)*)? / *
		//	 * This is the logic for the operation.
		//	 * How are we going to resolve all references that are in scope for Xbase language?
		//	 * Will things like variables that are actually there in generated in the Impl class be accessible directly?
		//	 * / body=XBlockExpression?
		public Group getGroup() { return cGroup; }

		//annotations+=XAnnotation*
		public Assignment getAnnotationsAssignment_0() { return cAnnotationsAssignment_0; }

		//XAnnotation
		public RuleCall getAnnotationsXAnnotationParserRuleCall_0_0() { return cAnnotationsXAnnotationParserRuleCall_0_0; }

		//"op"
		public Keyword getOpKeyword_1() { return cOpKeyword_1; }

		//(unordered?="unordered" unique?="unique"? | unique?="unique" unordered?="unordered"?)?
		public Alternatives getAlternatives_2() { return cAlternatives_2; }

		//unordered?="unordered" unique?="unique"?
		public Group getGroup_2_0() { return cGroup_2_0; }

		//unordered?="unordered"
		public Assignment getUnorderedAssignment_2_0_0() { return cUnorderedAssignment_2_0_0; }

		//"unordered"
		public Keyword getUnorderedUnorderedKeyword_2_0_0_0() { return cUnorderedUnorderedKeyword_2_0_0_0; }

		//unique?="unique"?
		public Assignment getUniqueAssignment_2_0_1() { return cUniqueAssignment_2_0_1; }

		//"unique"
		public Keyword getUniqueUniqueKeyword_2_0_1_0() { return cUniqueUniqueKeyword_2_0_1_0; }

		//unique?="unique" unordered?="unordered"?
		public Group getGroup_2_1() { return cGroup_2_1; }

		//unique?="unique"
		public Assignment getUniqueAssignment_2_1_0() { return cUniqueAssignment_2_1_0; }

		//"unique"
		public Keyword getUniqueUniqueKeyword_2_1_0_0() { return cUniqueUniqueKeyword_2_1_0_0; }

		//unordered?="unordered"?
		public Assignment getUnorderedAssignment_2_1_1() { return cUnorderedAssignment_2_1_1; }

		//"unordered"
		public Keyword getUnorderedUnorderedKeyword_2_1_1_0() { return cUnorderedUnorderedKeyword_2_1_1_0; }

		//("<" typeParameters+=XTypeParameter ("," typeParameters+=XTypeParameter)* ">")?
		public Group getGroup_3() { return cGroup_3; }

		//"<"
		public Keyword getLessThanSignKeyword_3_0() { return cLessThanSignKeyword_3_0; }

		//typeParameters+=XTypeParameter
		public Assignment getTypeParametersAssignment_3_1() { return cTypeParametersAssignment_3_1; }

		//XTypeParameter
		public RuleCall getTypeParametersXTypeParameterParserRuleCall_3_1_0() { return cTypeParametersXTypeParameterParserRuleCall_3_1_0; }

		//("," typeParameters+=XTypeParameter)*
		public Group getGroup_3_2() { return cGroup_3_2; }

		//","
		public Keyword getCommaKeyword_3_2_0() { return cCommaKeyword_3_2_0; }

		//typeParameters+=XTypeParameter
		public Assignment getTypeParametersAssignment_3_2_1() { return cTypeParametersAssignment_3_2_1; }

		//XTypeParameter
		public RuleCall getTypeParametersXTypeParameterParserRuleCall_3_2_1_0() { return cTypeParametersXTypeParameterParserRuleCall_3_2_1_0; }

		//">"
		public Keyword getGreaterThanSignKeyword_3_3() { return cGreaterThanSignKeyword_3_3; }

		//type=XGenericType | "void"
		public Alternatives getAlternatives_4() { return cAlternatives_4; }

		//type=XGenericType
		public Assignment getTypeAssignment_4_0() { return cTypeAssignment_4_0; }

		//XGenericType
		public RuleCall getTypeXGenericTypeParserRuleCall_4_0_0() { return cTypeXGenericTypeParserRuleCall_4_0_0; }

		//"void"
		public Keyword getVoidKeyword_4_1() { return cVoidKeyword_4_1; }

		//multiplicity=XMultiplicity?
		public Assignment getMultiplicityAssignment_5() { return cMultiplicityAssignment_5; }

		//XMultiplicity
		public RuleCall getMultiplicityXMultiplicityParserRuleCall_5_0() { return cMultiplicityXMultiplicityParserRuleCall_5_0; }

		//name=ID
		public Assignment getNameAssignment_6() { return cNameAssignment_6; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_6_0() { return cNameIDTerminalRuleCall_6_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_7() { return cLeftParenthesisKeyword_7; }

		//(parameters+=XParameter ("," parameters+=XParameter)*)?
		public Group getGroup_8() { return cGroup_8; }

		//parameters+=XParameter
		public Assignment getParametersAssignment_8_0() { return cParametersAssignment_8_0; }

		//XParameter
		public RuleCall getParametersXParameterParserRuleCall_8_0_0() { return cParametersXParameterParserRuleCall_8_0_0; }

		//("," parameters+=XParameter)*
		public Group getGroup_8_1() { return cGroup_8_1; }

		//","
		public Keyword getCommaKeyword_8_1_0() { return cCommaKeyword_8_1_0; }

		//parameters+=XParameter
		public Assignment getParametersAssignment_8_1_1() { return cParametersAssignment_8_1_1; }

		//XParameter
		public RuleCall getParametersXParameterParserRuleCall_8_1_1_0() { return cParametersXParameterParserRuleCall_8_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_9() { return cRightParenthesisKeyword_9; }

		//("throws" exceptions+=XGenericType ("," exceptions+=XGenericType)*)?
		public Group getGroup_10() { return cGroup_10; }

		//"throws"
		public Keyword getThrowsKeyword_10_0() { return cThrowsKeyword_10_0; }

		//exceptions+=XGenericType
		public Assignment getExceptionsAssignment_10_1() { return cExceptionsAssignment_10_1; }

		//XGenericType
		public RuleCall getExceptionsXGenericTypeParserRuleCall_10_1_0() { return cExceptionsXGenericTypeParserRuleCall_10_1_0; }

		//("," exceptions+=XGenericType)*
		public Group getGroup_10_2() { return cGroup_10_2; }

		//","
		public Keyword getCommaKeyword_10_2_0() { return cCommaKeyword_10_2_0; }

		//exceptions+=XGenericType
		public Assignment getExceptionsAssignment_10_2_1() { return cExceptionsAssignment_10_2_1; }

		//XGenericType
		public RuleCall getExceptionsXGenericTypeParserRuleCall_10_2_1_0() { return cExceptionsXGenericTypeParserRuleCall_10_2_1_0; }

		//body=XBlockExpression?
		public Assignment getBodyAssignment_11() { return cBodyAssignment_11; }

		//XBlockExpression
		public RuleCall getBodyXBlockExpressionParserRuleCall_11_0() { return cBodyXBlockExpressionParserRuleCall_11_0; }
	}

	public class XParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XParameter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAnnotationsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAnnotationsXAnnotationParserRuleCall_0_0 = (RuleCall)cAnnotationsAssignment_0.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Assignment cUnorderedAssignment_1_0_0 = (Assignment)cGroup_1_0.eContents().get(0);
		private final Keyword cUnorderedUnorderedKeyword_1_0_0_0 = (Keyword)cUnorderedAssignment_1_0_0.eContents().get(0);
		private final Assignment cUniqueAssignment_1_0_1 = (Assignment)cGroup_1_0.eContents().get(1);
		private final Keyword cUniqueUniqueKeyword_1_0_1_0 = (Keyword)cUniqueAssignment_1_0_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Assignment cUniqueAssignment_1_1_0 = (Assignment)cGroup_1_1.eContents().get(0);
		private final Keyword cUniqueUniqueKeyword_1_1_0_0 = (Keyword)cUniqueAssignment_1_1_0.eContents().get(0);
		private final Assignment cUnorderedAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final Keyword cUnorderedUnorderedKeyword_1_1_1_0 = (Keyword)cUnorderedAssignment_1_1_1.eContents().get(0);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypeXGenericTypeParserRuleCall_2_0 = (RuleCall)cTypeAssignment_2.eContents().get(0);
		private final Assignment cMultiplicityAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cMultiplicityXMultiplicityParserRuleCall_3_0 = (RuleCall)cMultiplicityAssignment_3.eContents().get(0);
		private final Assignment cNameAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cNameIDTerminalRuleCall_4_0 = (RuleCall)cNameAssignment_4.eContents().get(0);
		
		//XParameter:
		//	annotations+=XAnnotation* (unordered?="unordered" unique?="unique"? | unique?="unique" unordered?="unordered"?)?
		//	type=XGenericType multiplicity=XMultiplicity? name=ID;
		public ParserRule getRule() { return rule; }

		//annotations+=XAnnotation* (unordered?="unordered" unique?="unique"? | unique?="unique" unordered?="unordered"?)?
		//type=XGenericType multiplicity=XMultiplicity? name=ID
		public Group getGroup() { return cGroup; }

		//annotations+=XAnnotation*
		public Assignment getAnnotationsAssignment_0() { return cAnnotationsAssignment_0; }

		//XAnnotation
		public RuleCall getAnnotationsXAnnotationParserRuleCall_0_0() { return cAnnotationsXAnnotationParserRuleCall_0_0; }

		//(unordered?="unordered" unique?="unique"? | unique?="unique" unordered?="unordered"?)?
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//unordered?="unordered" unique?="unique"?
		public Group getGroup_1_0() { return cGroup_1_0; }

		//unordered?="unordered"
		public Assignment getUnorderedAssignment_1_0_0() { return cUnorderedAssignment_1_0_0; }

		//"unordered"
		public Keyword getUnorderedUnorderedKeyword_1_0_0_0() { return cUnorderedUnorderedKeyword_1_0_0_0; }

		//unique?="unique"?
		public Assignment getUniqueAssignment_1_0_1() { return cUniqueAssignment_1_0_1; }

		//"unique"
		public Keyword getUniqueUniqueKeyword_1_0_1_0() { return cUniqueUniqueKeyword_1_0_1_0; }

		//unique?="unique" unordered?="unordered"?
		public Group getGroup_1_1() { return cGroup_1_1; }

		//unique?="unique"
		public Assignment getUniqueAssignment_1_1_0() { return cUniqueAssignment_1_1_0; }

		//"unique"
		public Keyword getUniqueUniqueKeyword_1_1_0_0() { return cUniqueUniqueKeyword_1_1_0_0; }

		//unordered?="unordered"?
		public Assignment getUnorderedAssignment_1_1_1() { return cUnorderedAssignment_1_1_1; }

		//"unordered"
		public Keyword getUnorderedUnorderedKeyword_1_1_1_0() { return cUnorderedUnorderedKeyword_1_1_1_0; }

		//type=XGenericType
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }

		//XGenericType
		public RuleCall getTypeXGenericTypeParserRuleCall_2_0() { return cTypeXGenericTypeParserRuleCall_2_0; }

		//multiplicity=XMultiplicity?
		public Assignment getMultiplicityAssignment_3() { return cMultiplicityAssignment_3; }

		//XMultiplicity
		public RuleCall getMultiplicityXMultiplicityParserRuleCall_3_0() { return cMultiplicityXMultiplicityParserRuleCall_3_0; }

		//name=ID
		public Assignment getNameAssignment_4() { return cNameAssignment_4; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_4_0() { return cNameIDTerminalRuleCall_4_0; }
	}

	public class XTypeParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XTypeParameter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAnnotationsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAnnotationsXAnnotationParserRuleCall_0_0 = (RuleCall)cAnnotationsAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cExtendsKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cBoundsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cBoundsXGenericTypeParserRuleCall_2_1_0 = (RuleCall)cBoundsAssignment_2_1.eContents().get(0);
		private final Group cGroup_2_2 = (Group)cGroup_2.eContents().get(2);
		private final Keyword cAmpersandKeyword_2_2_0 = (Keyword)cGroup_2_2.eContents().get(0);
		private final Assignment cBoundsAssignment_2_2_1 = (Assignment)cGroup_2_2.eContents().get(1);
		private final RuleCall cBoundsXGenericTypeParserRuleCall_2_2_1_0 = (RuleCall)cBoundsAssignment_2_2_1.eContents().get(0);
		
		//XTypeParameter:
		//	annotations+=XAnnotation* name=ID ("extends" bounds+=XGenericType ("&" bounds+=XGenericType)*)?;
		public ParserRule getRule() { return rule; }

		//annotations+=XAnnotation* name=ID ("extends" bounds+=XGenericType ("&" bounds+=XGenericType)*)?
		public Group getGroup() { return cGroup; }

		//annotations+=XAnnotation*
		public Assignment getAnnotationsAssignment_0() { return cAnnotationsAssignment_0; }

		//XAnnotation
		public RuleCall getAnnotationsXAnnotationParserRuleCall_0_0() { return cAnnotationsXAnnotationParserRuleCall_0_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//("extends" bounds+=XGenericType ("&" bounds+=XGenericType)*)?
		public Group getGroup_2() { return cGroup_2; }

		//"extends"
		public Keyword getExtendsKeyword_2_0() { return cExtendsKeyword_2_0; }

		//bounds+=XGenericType
		public Assignment getBoundsAssignment_2_1() { return cBoundsAssignment_2_1; }

		//XGenericType
		public RuleCall getBoundsXGenericTypeParserRuleCall_2_1_0() { return cBoundsXGenericTypeParserRuleCall_2_1_0; }

		//("&" bounds+=XGenericType)*
		public Group getGroup_2_2() { return cGroup_2_2; }

		//"&"
		public Keyword getAmpersandKeyword_2_2_0() { return cAmpersandKeyword_2_2_0; }

		//bounds+=XGenericType
		public Assignment getBoundsAssignment_2_2_1() { return cBoundsAssignment_2_2_1; }

		//XGenericType
		public RuleCall getBoundsXGenericTypeParserRuleCall_2_2_1_0() { return cBoundsXGenericTypeParserRuleCall_2_2_1_0; }
	}

	public class XMultiplicityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XMultiplicity");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Keyword cQuestionMarkKeyword_1_0 = (Keyword)cAlternatives_1.eContents().get(0);
		private final Keyword cAsteriskKeyword_1_1 = (Keyword)cAlternatives_1.eContents().get(1);
		private final Keyword cPlusSignKeyword_1_2 = (Keyword)cAlternatives_1.eContents().get(2);
		private final Group cGroup_1_3 = (Group)cAlternatives_1.eContents().get(3);
		private final RuleCall cINTTerminalRuleCall_1_3_0 = (RuleCall)cGroup_1_3.eContents().get(0);
		private final Group cGroup_1_3_1 = (Group)cGroup_1_3.eContents().get(1);
		private final Keyword cFullStopFullStopKeyword_1_3_1_0 = (Keyword)cGroup_1_3_1.eContents().get(0);
		private final Alternatives cAlternatives_1_3_1_1 = (Alternatives)cGroup_1_3_1.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_1_3_1_1_0 = (RuleCall)cAlternatives_1_3_1_1.eContents().get(0);
		private final Keyword cQuestionMarkKeyword_1_3_1_1_1 = (Keyword)cAlternatives_1_3_1_1.eContents().get(1);
		private final Keyword cAsteriskKeyword_1_3_1_1_2 = (Keyword)cAlternatives_1_3_1_1.eContents().get(2);
		private final Keyword cRightSquareBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//XMultiplicity:
		//	"[" ("?" | "*" | "+" | INT (".." (INT | "?" | "*"))?)? "]";
		public ParserRule getRule() { return rule; }

		//"[" ("?" | "*" | "+" | INT (".." (INT | "?" | "*"))?)? "]"
		public Group getGroup() { return cGroup; }

		//"["
		public Keyword getLeftSquareBracketKeyword_0() { return cLeftSquareBracketKeyword_0; }

		//("?" | "*" | "+" | INT (".." (INT | "?" | "*"))?)?
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//"?"
		public Keyword getQuestionMarkKeyword_1_0() { return cQuestionMarkKeyword_1_0; }

		//"*"
		public Keyword getAsteriskKeyword_1_1() { return cAsteriskKeyword_1_1; }

		//"+"
		public Keyword getPlusSignKeyword_1_2() { return cPlusSignKeyword_1_2; }

		//INT (".." (INT | "?" | "*"))?
		public Group getGroup_1_3() { return cGroup_1_3; }

		//INT
		public RuleCall getINTTerminalRuleCall_1_3_0() { return cINTTerminalRuleCall_1_3_0; }

		//(".." (INT | "?" | "*"))?
		public Group getGroup_1_3_1() { return cGroup_1_3_1; }

		//".."
		public Keyword getFullStopFullStopKeyword_1_3_1_0() { return cFullStopFullStopKeyword_1_3_1_0; }

		//INT | "?" | "*"
		public Alternatives getAlternatives_1_3_1_1() { return cAlternatives_1_3_1_1; }

		//INT
		public RuleCall getINTTerminalRuleCall_1_3_1_1_0() { return cINTTerminalRuleCall_1_3_1_1_0; }

		//"?"
		public Keyword getQuestionMarkKeyword_1_3_1_1_1() { return cQuestionMarkKeyword_1_3_1_1_1; }

		//"*"
		public Keyword getAsteriskKeyword_1_3_1_1_2() { return cAsteriskKeyword_1_3_1_1_2; }

		//"]"
		public Keyword getRightSquareBracketKeyword_2() { return cRightSquareBracketKeyword_2; }
	}

	public class XBlockExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XBlockExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cXBlockExpressionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cExpressionsAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cExpressionsXExpressionInsideBlockParserRuleCall_2_0_0 = (RuleCall)cExpressionsAssignment_2_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//XBlockExpression returns xbase::XBlockExpression:
		//	{xbase::XBlockExpression} "{" (expressions+=XExpressionInsideBlock ";"?)* "}";
		public ParserRule getRule() { return rule; }

		//{xbase::XBlockExpression} "{" (expressions+=XExpressionInsideBlock ";"?)* "}"
		public Group getGroup() { return cGroup; }

		//{xbase::XBlockExpression}
		public Action getXBlockExpressionAction_0() { return cXBlockExpressionAction_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//(expressions+=XExpressionInsideBlock ";"?)*
		public Group getGroup_2() { return cGroup_2; }

		//expressions+=XExpressionInsideBlock
		public Assignment getExpressionsAssignment_2_0() { return cExpressionsAssignment_2_0; }

		//XExpressionInsideBlock
		public RuleCall getExpressionsXExpressionInsideBlockParserRuleCall_2_0_0() { return cExpressionsXExpressionInsideBlockParserRuleCall_2_0_0; }

		//";"?
		public Keyword getSemicolonKeyword_2_1() { return cSemicolonKeyword_2_1; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}

	public class XGenericTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XGenericType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cTypeGenBaseCrossReference_0_0 = (CrossReference)cTypeAssignment_0.eContents().get(0);
		private final RuleCall cTypeGenBaseQualifiedNameParserRuleCall_0_0_1 = (RuleCall)cTypeGenBaseCrossReference_0_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cLessThanSignKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cTypeArgumentsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cTypeArgumentsXGenericTypeArgumentParserRuleCall_1_1_0 = (RuleCall)cTypeArgumentsAssignment_1_1.eContents().get(0);
		private final Group cGroup_1_2 = (Group)cGroup_1.eContents().get(2);
		private final Keyword cCommaKeyword_1_2_0 = (Keyword)cGroup_1_2.eContents().get(0);
		private final Assignment cTypeArgumentsAssignment_1_2_1 = (Assignment)cGroup_1_2.eContents().get(1);
		private final RuleCall cTypeArgumentsXGenericTypeArgumentParserRuleCall_1_2_1_0 = (RuleCall)cTypeArgumentsAssignment_1_2_1.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		
		//XGenericType: // classifier=[XClassifier|QualifiedName] (=>'<' typeArguments+=XGenericTypeArgument (',' typeArguments+=XGenericTypeArgument)* '>')?
		//	type=[genmodel::GenBase|QualifiedName] ("<" typeArguments+=XGenericTypeArgument (","
		//	typeArguments+=XGenericTypeArgument)* ">")?;
		public ParserRule getRule() { return rule; }

		//// classifier=[XClassifier|QualifiedName] (=>'<' typeArguments+=XGenericTypeArgument (',' typeArguments+=XGenericTypeArgument)* '>')?
		//type=[genmodel::GenBase|QualifiedName] ("<" typeArguments+=XGenericTypeArgument (","
		//typeArguments+=XGenericTypeArgument)* ">")?
		public Group getGroup() { return cGroup; }

		//// classifier=[XClassifier|QualifiedName] (=>'<' typeArguments+=XGenericTypeArgument (',' typeArguments+=XGenericTypeArgument)* '>')?
		//type=[genmodel::GenBase|QualifiedName]
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }

		//[genmodel::GenBase|QualifiedName]
		public CrossReference getTypeGenBaseCrossReference_0_0() { return cTypeGenBaseCrossReference_0_0; }

		//QualifiedName
		public RuleCall getTypeGenBaseQualifiedNameParserRuleCall_0_0_1() { return cTypeGenBaseQualifiedNameParserRuleCall_0_0_1; }

		//(=> "<" typeArguments+=XGenericTypeArgument ("," typeArguments+=XGenericTypeArgument)* ">")?
		public Group getGroup_1() { return cGroup_1; }

		//=> "<"
		public Keyword getLessThanSignKeyword_1_0() { return cLessThanSignKeyword_1_0; }

		//typeArguments+=XGenericTypeArgument
		public Assignment getTypeArgumentsAssignment_1_1() { return cTypeArgumentsAssignment_1_1; }

		//XGenericTypeArgument
		public RuleCall getTypeArgumentsXGenericTypeArgumentParserRuleCall_1_1_0() { return cTypeArgumentsXGenericTypeArgumentParserRuleCall_1_1_0; }

		//("," typeArguments+=XGenericTypeArgument)*
		public Group getGroup_1_2() { return cGroup_1_2; }

		//","
		public Keyword getCommaKeyword_1_2_0() { return cCommaKeyword_1_2_0; }

		//typeArguments+=XGenericTypeArgument
		public Assignment getTypeArgumentsAssignment_1_2_1() { return cTypeArgumentsAssignment_1_2_1; }

		//XGenericTypeArgument
		public RuleCall getTypeArgumentsXGenericTypeArgumentParserRuleCall_1_2_1_0() { return cTypeArgumentsXGenericTypeArgumentParserRuleCall_1_2_1_0; }

		//">"
		public Keyword getGreaterThanSignKeyword_1_3() { return cGreaterThanSignKeyword_1_3; }
	}

	public class XGenericTypeArgumentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XGenericTypeArgument");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cXGenericTypeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cXGenericWildcardTypeArgumentParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//XGenericTypeArgument returns XGenericType:
		//	XGenericType | XGenericWildcardTypeArgument;
		public ParserRule getRule() { return rule; }

		//XGenericType | XGenericWildcardTypeArgument
		public Alternatives getAlternatives() { return cAlternatives; }

		//XGenericType
		public RuleCall getXGenericTypeParserRuleCall_0() { return cXGenericTypeParserRuleCall_0; }

		//XGenericWildcardTypeArgument
		public RuleCall getXGenericWildcardTypeArgumentParserRuleCall_1() { return cXGenericWildcardTypeArgumentParserRuleCall_1; }
	}

	public class XGenericWildcardTypeArgumentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XGenericWildcardTypeArgument");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cXGenericTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cQuestionMarkKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Group cGroup_2_0 = (Group)cAlternatives_2.eContents().get(0);
		private final Keyword cExtendsKeyword_2_0_0 = (Keyword)cGroup_2_0.eContents().get(0);
		private final Assignment cUpperBoundAssignment_2_0_1 = (Assignment)cGroup_2_0.eContents().get(1);
		private final RuleCall cUpperBoundXGenericTypeParserRuleCall_2_0_1_0 = (RuleCall)cUpperBoundAssignment_2_0_1.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cAlternatives_2.eContents().get(1);
		private final Keyword cSuperKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cLowerBoundAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cLowerBoundXGenericTypeParserRuleCall_2_1_1_0 = (RuleCall)cLowerBoundAssignment_2_1_1.eContents().get(0);
		
		//XGenericWildcardTypeArgument returns XGenericType:
		//	{XGenericType} "?" ("extends" upperBound=XGenericType | "super" lowerBound=XGenericType)?;
		public ParserRule getRule() { return rule; }

		//{XGenericType} "?" ("extends" upperBound=XGenericType | "super" lowerBound=XGenericType)?
		public Group getGroup() { return cGroup; }

		//{XGenericType}
		public Action getXGenericTypeAction_0() { return cXGenericTypeAction_0; }

		//"?"
		public Keyword getQuestionMarkKeyword_1() { return cQuestionMarkKeyword_1; }

		//("extends" upperBound=XGenericType | "super" lowerBound=XGenericType)?
		public Alternatives getAlternatives_2() { return cAlternatives_2; }

		//"extends" upperBound=XGenericType
		public Group getGroup_2_0() { return cGroup_2_0; }

		//"extends"
		public Keyword getExtendsKeyword_2_0_0() { return cExtendsKeyword_2_0_0; }

		//upperBound=XGenericType
		public Assignment getUpperBoundAssignment_2_0_1() { return cUpperBoundAssignment_2_0_1; }

		//XGenericType
		public RuleCall getUpperBoundXGenericTypeParserRuleCall_2_0_1_0() { return cUpperBoundXGenericTypeParserRuleCall_2_0_1_0; }

		//"super" lowerBound=XGenericType
		public Group getGroup_2_1() { return cGroup_2_1; }

		//"super"
		public Keyword getSuperKeyword_2_1_0() { return cSuperKeyword_2_1_0; }

		//lowerBound=XGenericType
		public Assignment getLowerBoundAssignment_2_1_1() { return cLowerBoundAssignment_2_1_1; }

		//XGenericType
		public RuleCall getLowerBoundXGenericTypeParserRuleCall_2_1_1_0() { return cLowerBoundXGenericTypeParserRuleCall_2_1_1_0; }
	}
	
	
	private XPackageElements pXPackage;
	private XAnnotationElements pXAnnotation;
	private XStringToStringMapEntryElements pXStringToStringMapEntry;
	private XImportDirectiveElements pXImportDirective;
	private QualifiedNameWithWildcardElements pQualifiedNameWithWildcard;
	private XAnnotationDirectiveElements pXAnnotationDirective;
	private XClassifierElements pXClassifier;
	private XDataTypeElements pXDataType;
	private XEnumElements pXEnum;
	private XEnumLiteralElements pXEnumLiteral;
	private XClassElements pXClass;
	private XMemberElements pXMember;
	private XAttributeElements pXAttribute;
	private XReferenceElements pXReference;
	private XOperationElements pXOperation;
	private XParameterElements pXParameter;
	private XTypeParameterElements pXTypeParameter;
	private XMultiplicityElements pXMultiplicity;
	private XBlockExpressionElements pXBlockExpression;
	private XGenericTypeElements pXGenericType;
	private XGenericTypeArgumentElements pXGenericTypeArgument;
	private XGenericWildcardTypeArgumentElements pXGenericWildcardTypeArgument;
	
	private final GrammarProvider grammarProvider;

	private XbaseGrammarAccess gaXbase;

	@Inject
	public XcoreGrammarAccess(GrammarProvider grammarProvider,
		XbaseGrammarAccess gaXbase) {
		this.grammarProvider = grammarProvider;
		this.gaXbase = gaXbase;
	}
	
	public Grammar getGrammar() {	
		return grammarProvider.getGrammar(this);
	}
	

	public XbaseGrammarAccess getXbaseGrammarAccess() {
		return gaXbase;
	}

	
	//XPackage:
	//	annotations+=XAnnotation* "package" name=QualifiedName importDirectives+=XImportDirective*
	//	annotationDirectives+=XAnnotationDirective* classifiers+=XClassifier*;
	public XPackageElements getXPackageAccess() {
		return (pXPackage != null) ? pXPackage : (pXPackage = new XPackageElements());
	}
	
	public ParserRule getXPackageRule() {
		return getXPackageAccess().getRule();
	}

	//XAnnotation:
	//	"@" source=[XAnnotationDirective|ValidID] ("(" details+=XStringToStringMapEntry (","
	//	details+=XStringToStringMapEntry)* ")")?;
	public XAnnotationElements getXAnnotationAccess() {
		return (pXAnnotation != null) ? pXAnnotation : (pXAnnotation = new XAnnotationElements());
	}
	
	public ParserRule getXAnnotationRule() {
		return getXAnnotationAccess().getRule();
	}

	//XStringToStringMapEntry:
	//	key=QualifiedName "=" value=STRING;
	public XStringToStringMapEntryElements getXStringToStringMapEntryAccess() {
		return (pXStringToStringMapEntry != null) ? pXStringToStringMapEntry : (pXStringToStringMapEntry = new XStringToStringMapEntryElements());
	}
	
	public ParserRule getXStringToStringMapEntryRule() {
		return getXStringToStringMapEntryAccess().getRule();
	}

	//XImportDirective:
	//	"import" importedNamespace=QualifiedNameWithWildcard;
	public XImportDirectiveElements getXImportDirectiveAccess() {
		return (pXImportDirective != null) ? pXImportDirective : (pXImportDirective = new XImportDirectiveElements());
	}
	
	public ParserRule getXImportDirectiveRule() {
		return getXImportDirectiveAccess().getRule();
	}

	//QualifiedNameWithWildcard returns ecore::EString:
	//	QualifiedName ".*"?;
	public QualifiedNameWithWildcardElements getQualifiedNameWithWildcardAccess() {
		return (pQualifiedNameWithWildcard != null) ? pQualifiedNameWithWildcard : (pQualifiedNameWithWildcard = new QualifiedNameWithWildcardElements());
	}
	
	public ParserRule getQualifiedNameWithWildcardRule() {
		return getQualifiedNameWithWildcardAccess().getRule();
	}

	//XAnnotationDirective:
	//	"annotation" sourceURI=STRING "as" name=ValidID;
	public XAnnotationDirectiveElements getXAnnotationDirectiveAccess() {
		return (pXAnnotationDirective != null) ? pXAnnotationDirective : (pXAnnotationDirective = new XAnnotationDirectiveElements());
	}
	
	public ParserRule getXAnnotationDirectiveRule() {
		return getXAnnotationDirectiveAccess().getRule();
	}

	//XClassifier:
	//	XClass | XDataType | XEnum;
	public XClassifierElements getXClassifierAccess() {
		return (pXClassifier != null) ? pXClassifier : (pXClassifier = new XClassifierElements());
	}
	
	public ParserRule getXClassifierRule() {
		return getXClassifierAccess().getRule();
	}

	//XDataType:
	//	annotations+=XAnnotation* "type" name=ID ("<" typeParameters+=XTypeParameter ("," typeParameters+=XTypeParameter)*
	//	">")? "wraps" instanceTypeName=QualifiedName ((serializable?="create" createBody=XBlockExpression)? / *
	//	   * In scope for create should be what's visible in XyzFactoryImpl and 'this' will denote the literal value.
	//	   * The block expression must yield null or an instance of the wrapped type.
	//	   * / / *
	//	   * In scope for create should be what's visible in XyzFactoryImpl 
	//	   * and 'this' will denote an instance of the wrapped type.
	//	   * The block expression must yield a java.lang.String.
	//	   * / & ("convert" convertBody=XBlockExpression)?);
	public XDataTypeElements getXDataTypeAccess() {
		return (pXDataType != null) ? pXDataType : (pXDataType = new XDataTypeElements());
	}
	
	public ParserRule getXDataTypeRule() {
		return getXDataTypeAccess().getRule();
	}

	//XEnum:
	//	annotations+=XAnnotation* "enum" name=ID "{" (literals+=XEnumLiteral (","? literals+=XEnumLiteral)*)? "}";
	public XEnumElements getXEnumAccess() {
		return (pXEnum != null) ? pXEnum : (pXEnum = new XEnumElements());
	}
	
	public ParserRule getXEnumRule() {
		return getXEnumAccess().getRule();
	}

	//XEnumLiteral:
	//	annotations+=XAnnotation* name=ID ("as" literal=STRING)? ("=" value=INT)?;
	public XEnumLiteralElements getXEnumLiteralAccess() {
		return (pXEnumLiteral != null) ? pXEnumLiteral : (pXEnumLiteral = new XEnumLiteralElements());
	}
	
	public ParserRule getXEnumLiteralRule() {
		return getXEnumLiteralAccess().getRule();
	}

	//XClass:
	//	{XClass} annotations+=XAnnotation* (abstract?="abstract"? "class" | interface?="interface") name=ID ("<"
	//	typeParameters+=XTypeParameter ("," typeParameters+=XTypeParameter)* ">")? ("extends" superTypes+=XGenericType (","
	//	superTypes+=XGenericType)*)? ("wraps" instanceTypeName=QualifiedName)? "{" members+=XMember* "}";
	public XClassElements getXClassAccess() {
		return (pXClass != null) ? pXClass : (pXClass = new XClassElements());
	}
	
	public ParserRule getXClassRule() {
		return getXClassAccess().getRule();
	}

	//XMember:
	//	XOperation | XReference | XAttribute;
	public XMemberElements getXMemberAccess() {
		return (pXMember != null) ? pXMember : (pXMember = new XMemberElements());
	}
	
	public ParserRule getXMemberRule() {
		return getXMemberAccess().getRule();
	}

	//XAttribute:
	//	annotations+=XAnnotation* (unordered?="unordered"? & unique?="unique"? & readonly?="readonly"? &
	//	transient?="transient"? & volatile?="volatile"? & unsettable?="unsettable"? & derived?="derived"? & iD?="id"?)
	//	(type=XGenericType multiplicity=XMultiplicity? | "void") name=ID ("=" defaultValueLiteral=STRING)? / *
	//	 * In scope for getBody should be what's visible in AbcImpl
	//	 * and 'this' will denote an instance of the feature's type.
	//	 * The block expression must yield a value of the feature's type.
	//	 * / (("get" getBody=XBlockExpression)? & ("set" setBody=XBlockExpression)? & ("isSet" isSetBody=XBlockExpression)? &
	//	("unset" unsetBody=XBlockExpression)?);
	public XAttributeElements getXAttributeAccess() {
		return (pXAttribute != null) ? pXAttribute : (pXAttribute = new XAttributeElements());
	}
	
	public ParserRule getXAttributeRule() {
		return getXAttributeAccess().getRule();
	}

	//XReference:
	//	annotations+=XAnnotation* (resolveProxies?="resolving"? & (containment?="contains" | container?="container") |
	//	local?="local"? & "refers") (unordered?="unordered"? & unique?="unique"? & readonly?="readonly"? &
	//	transient?="transient"? & volatile?="volatile"? & unsettable?="unsettable"? & derived?="derived"?) type=XGenericType
	//	multiplicity=XMultiplicity? name=ID ("opposite" opposite=[genmodel::GenFeature|ValidID])? ("keys"
	//	keys+=[genmodel::GenFeature|ValidID] ("," keys+=[genmodel::GenFeature|ValidID])*)? / *
	//	 * In scope for getBody should be what's visible in AbcImpl
	//	 * and 'this' will denote an instance of the feature's type.
	//	 * The block expression must yield a value of the feature's type.
	//	 * / (("get" getBody=XBlockExpression)? & ("set" setBody=XBlockExpression)? & ("isSet" isSetBody=XBlockExpression)? &
	//	("unset" unsetBody=XBlockExpression)?);
	public XReferenceElements getXReferenceAccess() {
		return (pXReference != null) ? pXReference : (pXReference = new XReferenceElements());
	}
	
	public ParserRule getXReferenceRule() {
		return getXReferenceAccess().getRule();
	}

	//XOperation:
	//	annotations+=XAnnotation* "op" (unordered?="unordered" unique?="unique"? | unique?="unique" unordered?="unordered"?)?
	//	("<" typeParameters+=XTypeParameter ("," typeParameters+=XTypeParameter)* ">")? (type=XGenericType | "void")
	//	multiplicity=XMultiplicity? name=ID "(" (parameters+=XParameter ("," parameters+=XParameter)*)? ")" ("throws"
	//	exceptions+=XGenericType ("," exceptions+=XGenericType)*)? / *
	//	 * This is the logic for the operation.
	//	 * How are we going to resolve all references that are in scope for Xbase language?
	//	 * Will things like variables that are actually there in generated in the Impl class be accessible directly?
	//	 * / body=XBlockExpression?;
	public XOperationElements getXOperationAccess() {
		return (pXOperation != null) ? pXOperation : (pXOperation = new XOperationElements());
	}
	
	public ParserRule getXOperationRule() {
		return getXOperationAccess().getRule();
	}

	//XParameter:
	//	annotations+=XAnnotation* (unordered?="unordered" unique?="unique"? | unique?="unique" unordered?="unordered"?)?
	//	type=XGenericType multiplicity=XMultiplicity? name=ID;
	public XParameterElements getXParameterAccess() {
		return (pXParameter != null) ? pXParameter : (pXParameter = new XParameterElements());
	}
	
	public ParserRule getXParameterRule() {
		return getXParameterAccess().getRule();
	}

	//XTypeParameter:
	//	annotations+=XAnnotation* name=ID ("extends" bounds+=XGenericType ("&" bounds+=XGenericType)*)?;
	public XTypeParameterElements getXTypeParameterAccess() {
		return (pXTypeParameter != null) ? pXTypeParameter : (pXTypeParameter = new XTypeParameterElements());
	}
	
	public ParserRule getXTypeParameterRule() {
		return getXTypeParameterAccess().getRule();
	}

	//XMultiplicity:
	//	"[" ("?" | "*" | "+" | INT (".." (INT | "?" | "*"))?)? "]";
	public XMultiplicityElements getXMultiplicityAccess() {
		return (pXMultiplicity != null) ? pXMultiplicity : (pXMultiplicity = new XMultiplicityElements());
	}
	
	public ParserRule getXMultiplicityRule() {
		return getXMultiplicityAccess().getRule();
	}

	//XBlockExpression returns xbase::XBlockExpression:
	//	{xbase::XBlockExpression} "{" (expressions+=XExpressionInsideBlock ";"?)* "}";
	public XBlockExpressionElements getXBlockExpressionAccess() {
		return (pXBlockExpression != null) ? pXBlockExpression : (pXBlockExpression = new XBlockExpressionElements());
	}
	
	public ParserRule getXBlockExpressionRule() {
		return getXBlockExpressionAccess().getRule();
	}

	//XGenericType: // classifier=[XClassifier|QualifiedName] (=>'<' typeArguments+=XGenericTypeArgument (',' typeArguments+=XGenericTypeArgument)* '>')?
	//	type=[genmodel::GenBase|QualifiedName] ("<" typeArguments+=XGenericTypeArgument (","
	//	typeArguments+=XGenericTypeArgument)* ">")?;
	public XGenericTypeElements getXGenericTypeAccess() {
		return (pXGenericType != null) ? pXGenericType : (pXGenericType = new XGenericTypeElements());
	}
	
	public ParserRule getXGenericTypeRule() {
		return getXGenericTypeAccess().getRule();
	}

	//XGenericTypeArgument returns XGenericType:
	//	XGenericType | XGenericWildcardTypeArgument;
	public XGenericTypeArgumentElements getXGenericTypeArgumentAccess() {
		return (pXGenericTypeArgument != null) ? pXGenericTypeArgument : (pXGenericTypeArgument = new XGenericTypeArgumentElements());
	}
	
	public ParserRule getXGenericTypeArgumentRule() {
		return getXGenericTypeArgumentAccess().getRule();
	}

	//XGenericWildcardTypeArgument returns XGenericType:
	//	{XGenericType} "?" ("extends" upperBound=XGenericType | "super" lowerBound=XGenericType)?;
	public XGenericWildcardTypeArgumentElements getXGenericWildcardTypeArgumentAccess() {
		return (pXGenericWildcardTypeArgument != null) ? pXGenericWildcardTypeArgument : (pXGenericWildcardTypeArgument = new XGenericWildcardTypeArgumentElements());
	}
	
	public ParserRule getXGenericWildcardTypeArgumentRule() {
		return getXGenericWildcardTypeArgumentAccess().getRule();
	}

	//XExpression:
	//	XAssignment;
	public XbaseGrammarAccess.XExpressionElements getXExpressionAccess() {
		return gaXbase.getXExpressionAccess();
	}
	
	public ParserRule getXExpressionRule() {
		return getXExpressionAccess().getRule();
	}

	//XAssignment returns XExpression:
	//	{XAssignment} / * (declaringType=[types::JvmDeclaredType] '::')? * / feature=[types::JvmIdentifiableElement|ValidID]
	//	OpSingleAssign value=XAssignment | XOrExpression (=> ({XBinaryOperation.leftOperand=current}
	//	feature=[types::JvmIdentifiableElement|OpMultiAssign]) rightOperand=XAssignment)?;
	public XbaseGrammarAccess.XAssignmentElements getXAssignmentAccess() {
		return gaXbase.getXAssignmentAccess();
	}
	
	public ParserRule getXAssignmentRule() {
		return getXAssignmentAccess().getRule();
	}

	//OpSingleAssign:
	//	"=";
	public XbaseGrammarAccess.OpSingleAssignElements getOpSingleAssignAccess() {
		return gaXbase.getOpSingleAssignAccess();
	}
	
	public ParserRule getOpSingleAssignRule() {
		return getOpSingleAssignAccess().getRule();
	}

	//OpMultiAssign:
	//	"+=";
	public XbaseGrammarAccess.OpMultiAssignElements getOpMultiAssignAccess() {
		return gaXbase.getOpMultiAssignAccess();
	}
	
	public ParserRule getOpMultiAssignRule() {
		return getOpMultiAssignAccess().getRule();
	}

	//XOrExpression returns XExpression:
	//	XAndExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpOr])
	//	rightOperand=XAndExpression)*;
	public XbaseGrammarAccess.XOrExpressionElements getXOrExpressionAccess() {
		return gaXbase.getXOrExpressionAccess();
	}
	
	public ParserRule getXOrExpressionRule() {
		return getXOrExpressionAccess().getRule();
	}

	//OpOr:
	//	"||";
	public XbaseGrammarAccess.OpOrElements getOpOrAccess() {
		return gaXbase.getOpOrAccess();
	}
	
	public ParserRule getOpOrRule() {
		return getOpOrAccess().getRule();
	}

	//XAndExpression returns XExpression:
	//	XEqualityExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpAnd])
	//	rightOperand=XEqualityExpression)*;
	public XbaseGrammarAccess.XAndExpressionElements getXAndExpressionAccess() {
		return gaXbase.getXAndExpressionAccess();
	}
	
	public ParserRule getXAndExpressionRule() {
		return getXAndExpressionAccess().getRule();
	}

	//OpAnd:
	//	"&&";
	public XbaseGrammarAccess.OpAndElements getOpAndAccess() {
		return gaXbase.getOpAndAccess();
	}
	
	public ParserRule getOpAndRule() {
		return getOpAndAccess().getRule();
	}

	//XEqualityExpression returns XExpression:
	//	XRelationalExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpEquality])
	//	rightOperand=XRelationalExpression)*;
	public XbaseGrammarAccess.XEqualityExpressionElements getXEqualityExpressionAccess() {
		return gaXbase.getXEqualityExpressionAccess();
	}
	
	public ParserRule getXEqualityExpressionRule() {
		return getXEqualityExpressionAccess().getRule();
	}

	//OpEquality:
	//	"==" | "!=";
	public XbaseGrammarAccess.OpEqualityElements getOpEqualityAccess() {
		return gaXbase.getOpEqualityAccess();
	}
	
	public ParserRule getOpEqualityRule() {
		return getOpEqualityAccess().getRule();
	}

	//XRelationalExpression returns XExpression:
	//	XOtherOperatorExpression (=> ({XInstanceOfExpression.expression=current} "instanceof")
	//	type=[types::JvmType|QualifiedName] | => ({XBinaryOperation.leftOperand=current}
	//	feature=[types::JvmIdentifiableElement|OpCompare]) rightOperand=XOtherOperatorExpression)*;
	public XbaseGrammarAccess.XRelationalExpressionElements getXRelationalExpressionAccess() {
		return gaXbase.getXRelationalExpressionAccess();
	}
	
	public ParserRule getXRelationalExpressionRule() {
		return getXRelationalExpressionAccess().getRule();
	}

	//OpCompare:
	//	">=" | "<=" | ">" | "<";
	public XbaseGrammarAccess.OpCompareElements getOpCompareAccess() {
		return gaXbase.getOpCompareAccess();
	}
	
	public ParserRule getOpCompareRule() {
		return getOpCompareAccess().getRule();
	}

	//XOtherOperatorExpression returns XExpression:
	//	XAdditiveExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpOther])
	//	rightOperand=XAdditiveExpression)*;
	public XbaseGrammarAccess.XOtherOperatorExpressionElements getXOtherOperatorExpressionAccess() {
		return gaXbase.getXOtherOperatorExpressionAccess();
	}
	
	public ParserRule getXOtherOperatorExpressionRule() {
		return getXOtherOperatorExpressionAccess().getRule();
	}

	//OpOther:
	//	"->" | "..";
	public XbaseGrammarAccess.OpOtherElements getOpOtherAccess() {
		return gaXbase.getOpOtherAccess();
	}
	
	public ParserRule getOpOtherRule() {
		return getOpOtherAccess().getRule();
	}

	//XAdditiveExpression returns XExpression:
	//	XMultiplicativeExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpAdd])
	//	rightOperand=XMultiplicativeExpression)*;
	public XbaseGrammarAccess.XAdditiveExpressionElements getXAdditiveExpressionAccess() {
		return gaXbase.getXAdditiveExpressionAccess();
	}
	
	public ParserRule getXAdditiveExpressionRule() {
		return getXAdditiveExpressionAccess().getRule();
	}

	//OpAdd:
	//	"+" | "-";
	public XbaseGrammarAccess.OpAddElements getOpAddAccess() {
		return gaXbase.getOpAddAccess();
	}
	
	public ParserRule getOpAddRule() {
		return getOpAddAccess().getRule();
	}

	//XMultiplicativeExpression returns XExpression:
	//	XUnaryOperation (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpMulti])
	//	rightOperand=XUnaryOperation)*;
	public XbaseGrammarAccess.XMultiplicativeExpressionElements getXMultiplicativeExpressionAccess() {
		return gaXbase.getXMultiplicativeExpressionAccess();
	}
	
	public ParserRule getXMultiplicativeExpressionRule() {
		return getXMultiplicativeExpressionAccess().getRule();
	}

	//OpMulti:
	//	"*" | "**" | "/" | "%";
	public XbaseGrammarAccess.OpMultiElements getOpMultiAccess() {
		return gaXbase.getOpMultiAccess();
	}
	
	public ParserRule getOpMultiRule() {
		return getOpMultiAccess().getRule();
	}

	//XUnaryOperation returns XExpression:
	//	{XUnaryOperation} feature=[types::JvmIdentifiableElement|OpUnary] operand=XCastedExpression | XCastedExpression;
	public XbaseGrammarAccess.XUnaryOperationElements getXUnaryOperationAccess() {
		return gaXbase.getXUnaryOperationAccess();
	}
	
	public ParserRule getXUnaryOperationRule() {
		return getXUnaryOperationAccess().getRule();
	}

	//OpUnary:
	//	"!" | "-" | "+";
	public XbaseGrammarAccess.OpUnaryElements getOpUnaryAccess() {
		return gaXbase.getOpUnaryAccess();
	}
	
	public ParserRule getOpUnaryRule() {
		return getOpUnaryAccess().getRule();
	}

	//XCastedExpression returns XExpression:
	//	XMemberFeatureCall (=> ({XCastedExpression.target=current} "as") type=JvmTypeReference)*;
	public XbaseGrammarAccess.XCastedExpressionElements getXCastedExpressionAccess() {
		return gaXbase.getXCastedExpressionAccess();
	}
	
	public ParserRule getXCastedExpressionRule() {
		return getXCastedExpressionAccess().getRule();
	}

	//XMemberFeatureCall returns XExpression:
	//	XPrimaryExpression (=> ({XAssignment.assignable=current} "." feature=[types::JvmIdentifiableElement|ValidID]
	//	OpSingleAssign) value=XAssignment | => ({XMemberFeatureCall.memberCallTarget=current} ("." | nullSafe?="?." |
	//	spreading?="*.")) ("<" typeArguments+=JvmArgumentTypeReference ("," typeArguments+=JvmArgumentTypeReference)* ">")?
	//	feature=[types::JvmIdentifiableElement|ValidID] (=> explicitOperationCall?="(" (memberCallArguments+=XShortClosure |
	//	memberCallArguments+=XExpression ("," memberCallArguments+=XExpression)*)? ")")?)*;
	public XbaseGrammarAccess.XMemberFeatureCallElements getXMemberFeatureCallAccess() {
		return gaXbase.getXMemberFeatureCallAccess();
	}
	
	public ParserRule getXMemberFeatureCallRule() {
		return getXMemberFeatureCallAccess().getRule();
	}

	//XPrimaryExpression returns XExpression:
	//	XConstructorCall | XBlockExpression | XSwitchExpression | XFeatureCall | XLiteral | XIfExpression | XForLoopExpression
	//	| XWhileExpression | XDoWhileExpression | XThrowExpression | XReturnExpression | XTryCatchFinallyExpression |
	//	XParenthesizedExpression;
	public XbaseGrammarAccess.XPrimaryExpressionElements getXPrimaryExpressionAccess() {
		return gaXbase.getXPrimaryExpressionAccess();
	}
	
	public ParserRule getXPrimaryExpressionRule() {
		return getXPrimaryExpressionAccess().getRule();
	}

	//XLiteral returns XExpression:
	//	XClosure | XBooleanLiteral | XIntLiteral | XNullLiteral | XStringLiteral | XTypeLiteral;
	public XbaseGrammarAccess.XLiteralElements getXLiteralAccess() {
		return gaXbase.getXLiteralAccess();
	}
	
	public ParserRule getXLiteralRule() {
		return getXLiteralAccess().getRule();
	}

	//XClosure returns XExpression:
	//	{XClosure} "[" (formalParameters+=JvmFormalParameter ("," formalParameters+=JvmFormalParameter)*)? "|"
	//	expression=XExpression "]";
	public XbaseGrammarAccess.XClosureElements getXClosureAccess() {
		return gaXbase.getXClosureAccess();
	}
	
	public ParserRule getXClosureRule() {
		return getXClosureAccess().getRule();
	}

	//XShortClosure returns XExpression:
	//	=> ({XClosure} (formalParameters+=JvmFormalParameter ("," formalParameters+=JvmFormalParameter)*)? "|")
	//	expression=XExpression;
	public XbaseGrammarAccess.XShortClosureElements getXShortClosureAccess() {
		return gaXbase.getXShortClosureAccess();
	}
	
	public ParserRule getXShortClosureRule() {
		return getXShortClosureAccess().getRule();
	}

	//XParenthesizedExpression returns XExpression:
	//	"(" XExpression ")";
	public XbaseGrammarAccess.XParenthesizedExpressionElements getXParenthesizedExpressionAccess() {
		return gaXbase.getXParenthesizedExpressionAccess();
	}
	
	public ParserRule getXParenthesizedExpressionRule() {
		return getXParenthesizedExpressionAccess().getRule();
	}

	//XIfExpression returns XExpression:
	//	{XIfExpression} "if" "(" if=XExpression ")" then=XExpression ("else" else=XExpression)?;
	public XbaseGrammarAccess.XIfExpressionElements getXIfExpressionAccess() {
		return gaXbase.getXIfExpressionAccess();
	}
	
	public ParserRule getXIfExpressionRule() {
		return getXIfExpressionAccess().getRule();
	}

	//XSwitchExpression returns XExpression:
	//	{XSwitchExpression} "switch" (localVarName=ValidID ":")? switch=XExpression "{" cases+=XCasePart+ ("default" ":"
	//	default=XExpression)? "}";
	public XbaseGrammarAccess.XSwitchExpressionElements getXSwitchExpressionAccess() {
		return gaXbase.getXSwitchExpressionAccess();
	}
	
	public ParserRule getXSwitchExpressionRule() {
		return getXSwitchExpressionAccess().getRule();
	}

	//XCasePart:
	//	typeGuard=JvmTypeReference? ("case" case=XExpression)? ":" then=XExpression;
	public XbaseGrammarAccess.XCasePartElements getXCasePartAccess() {
		return gaXbase.getXCasePartAccess();
	}
	
	public ParserRule getXCasePartRule() {
		return getXCasePartAccess().getRule();
	}

	//XForLoopExpression returns XExpression:
	//	{XForLoopExpression} "for" "(" declaredParam=JvmFormalParameter ":" forExpression=XExpression ")"
	//	eachExpression=XExpression;
	public XbaseGrammarAccess.XForLoopExpressionElements getXForLoopExpressionAccess() {
		return gaXbase.getXForLoopExpressionAccess();
	}
	
	public ParserRule getXForLoopExpressionRule() {
		return getXForLoopExpressionAccess().getRule();
	}

	//XWhileExpression returns XExpression:
	//	{XWhileExpression} "while" "(" predicate=XExpression ")" body=XExpression;
	public XbaseGrammarAccess.XWhileExpressionElements getXWhileExpressionAccess() {
		return gaXbase.getXWhileExpressionAccess();
	}
	
	public ParserRule getXWhileExpressionRule() {
		return getXWhileExpressionAccess().getRule();
	}

	//XDoWhileExpression returns XExpression:
	//	{XDoWhileExpression} "do" body=XExpression "while" "(" predicate=XExpression ")";
	public XbaseGrammarAccess.XDoWhileExpressionElements getXDoWhileExpressionAccess() {
		return gaXbase.getXDoWhileExpressionAccess();
	}
	
	public ParserRule getXDoWhileExpressionRule() {
		return getXDoWhileExpressionAccess().getRule();
	}

	//XExpressionInsideBlock returns XExpression:
	//	XVariableDeclaration | XExpression;
	public XbaseGrammarAccess.XExpressionInsideBlockElements getXExpressionInsideBlockAccess() {
		return gaXbase.getXExpressionInsideBlockAccess();
	}
	
	public ParserRule getXExpressionInsideBlockRule() {
		return getXExpressionInsideBlockAccess().getRule();
	}

	//XVariableDeclaration returns XExpression:
	//	{XVariableDeclaration} (writeable?="var" | "val") (=> (type=JvmTypeReference name=ValidID) | name=ValidID) ("="
	//	right=XExpression)?;
	public XbaseGrammarAccess.XVariableDeclarationElements getXVariableDeclarationAccess() {
		return gaXbase.getXVariableDeclarationAccess();
	}
	
	public ParserRule getXVariableDeclarationRule() {
		return getXVariableDeclarationAccess().getRule();
	}

	//JvmFormalParameter returns types::JvmFormalParameter:
	//	parameterType=JvmTypeReference? name=ValidID;
	public XbaseGrammarAccess.JvmFormalParameterElements getJvmFormalParameterAccess() {
		return gaXbase.getJvmFormalParameterAccess();
	}
	
	public ParserRule getJvmFormalParameterRule() {
		return getJvmFormalParameterAccess().getRule();
	}

	//XFeatureCall returns XExpression:
	//	{XFeatureCall} declaringType=[types::JvmDeclaredType|StaticQualifier]? ("<" typeArguments+=JvmArgumentTypeReference
	//	("," typeArguments+=JvmArgumentTypeReference)* ">")? feature=[types::JvmIdentifiableElement|IdOrSuper] (=>
	//	explicitOperationCall?="(" (featureCallArguments+=XShortClosure | featureCallArguments+=XExpression (","
	//	featureCallArguments+=XExpression)*)? ")")?;
	public XbaseGrammarAccess.XFeatureCallElements getXFeatureCallAccess() {
		return gaXbase.getXFeatureCallAccess();
	}
	
	public ParserRule getXFeatureCallRule() {
		return getXFeatureCallAccess().getRule();
	}

	//IdOrSuper:
	//	ValidID | "super";
	public XbaseGrammarAccess.IdOrSuperElements getIdOrSuperAccess() {
		return gaXbase.getIdOrSuperAccess();
	}
	
	public ParserRule getIdOrSuperRule() {
		return getIdOrSuperAccess().getRule();
	}

	//// This is a workaround since ANTLR will not be able to resolve
	//// StaticQualifier: ValidID ('::' ValidID)*; and XFeatureCall: (StaticQualifier '::')? ValidID
	//// Make sure to change the value converter if you change the syntax of the StaticQualifier
	//StaticQualifier:
	//	(ValidID "::")+;
	public XbaseGrammarAccess.StaticQualifierElements getStaticQualifierAccess() {
		return gaXbase.getStaticQualifierAccess();
	}
	
	public ParserRule getStaticQualifierRule() {
		return getStaticQualifierAccess().getRule();
	}

	//XConstructorCall returns XExpression:
	//	{XConstructorCall} "new" constructor=[types::JvmConstructor|QualifiedName] ("<"
	//	typeArguments+=JvmArgumentTypeReference ("," typeArguments+=JvmArgumentTypeReference)* ">")? "("
	//	(arguments+=XShortClosure | arguments+=XExpression ("," arguments+=XExpression)*)? ")";
	public XbaseGrammarAccess.XConstructorCallElements getXConstructorCallAccess() {
		return gaXbase.getXConstructorCallAccess();
	}
	
	public ParserRule getXConstructorCallRule() {
		return getXConstructorCallAccess().getRule();
	}

	//XBooleanLiteral returns XExpression:
	//	{XBooleanLiteral} ("false" | isTrue?="true");
	public XbaseGrammarAccess.XBooleanLiteralElements getXBooleanLiteralAccess() {
		return gaXbase.getXBooleanLiteralAccess();
	}
	
	public ParserRule getXBooleanLiteralRule() {
		return getXBooleanLiteralAccess().getRule();
	}

	//XNullLiteral returns XExpression:
	//	{XNullLiteral} "null";
	public XbaseGrammarAccess.XNullLiteralElements getXNullLiteralAccess() {
		return gaXbase.getXNullLiteralAccess();
	}
	
	public ParserRule getXNullLiteralRule() {
		return getXNullLiteralAccess().getRule();
	}

	//XIntLiteral returns XExpression:
	//	{XIntLiteral} value=INT;
	public XbaseGrammarAccess.XIntLiteralElements getXIntLiteralAccess() {
		return gaXbase.getXIntLiteralAccess();
	}
	
	public ParserRule getXIntLiteralRule() {
		return getXIntLiteralAccess().getRule();
	}

	//XStringLiteral returns XExpression:
	//	{XStringLiteral} value=STRING;
	public XbaseGrammarAccess.XStringLiteralElements getXStringLiteralAccess() {
		return gaXbase.getXStringLiteralAccess();
	}
	
	public ParserRule getXStringLiteralRule() {
		return getXStringLiteralAccess().getRule();
	}

	//XTypeLiteral returns XExpression:
	//	{XTypeLiteral} "typeof" "(" type=[types::JvmType|QualifiedName] ")";
	public XbaseGrammarAccess.XTypeLiteralElements getXTypeLiteralAccess() {
		return gaXbase.getXTypeLiteralAccess();
	}
	
	public ParserRule getXTypeLiteralRule() {
		return getXTypeLiteralAccess().getRule();
	}

	//XThrowExpression returns XExpression:
	//	{XThrowExpression} "throw" expression=XExpression;
	public XbaseGrammarAccess.XThrowExpressionElements getXThrowExpressionAccess() {
		return gaXbase.getXThrowExpressionAccess();
	}
	
	public ParserRule getXThrowExpressionRule() {
		return getXThrowExpressionAccess().getRule();
	}

	//XReturnExpression returns XExpression:
	//	{XReturnExpression} "return" => expression=XExpression?;
	public XbaseGrammarAccess.XReturnExpressionElements getXReturnExpressionAccess() {
		return gaXbase.getXReturnExpressionAccess();
	}
	
	public ParserRule getXReturnExpressionRule() {
		return getXReturnExpressionAccess().getRule();
	}

	//XTryCatchFinallyExpression returns XExpression:
	//	{XTryCatchFinallyExpression} "try" expression=XExpression (catchClauses+=XCatchClause+ ("finally"
	//	finallyExpression=XExpression)? | "finally" finallyExpression=XExpression);
	public XbaseGrammarAccess.XTryCatchFinallyExpressionElements getXTryCatchFinallyExpressionAccess() {
		return gaXbase.getXTryCatchFinallyExpressionAccess();
	}
	
	public ParserRule getXTryCatchFinallyExpressionRule() {
		return getXTryCatchFinallyExpressionAccess().getRule();
	}

	//XCatchClause:
	//	"catch" "(" declaredParam=JvmFormalParameter ")" expression=XExpression;
	public XbaseGrammarAccess.XCatchClauseElements getXCatchClauseAccess() {
		return gaXbase.getXCatchClauseAccess();
	}
	
	public ParserRule getXCatchClauseRule() {
		return getXCatchClauseAccess().getRule();
	}

	//QualifiedName:
	//	ValidID ("." ValidID)*;
	public XbaseGrammarAccess.QualifiedNameElements getQualifiedNameAccess() {
		return gaXbase.getQualifiedNameAccess();
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}

	//JvmTypeReference returns JvmParameterizedTypeReference:
	//	JvmParameterizedTypeReference | XFunctionTypeRef;
	public XtypeGrammarAccess.JvmTypeReferenceElements getJvmTypeReferenceAccess() {
		return gaXbase.getJvmTypeReferenceAccess();
	}
	
	public ParserRule getJvmTypeReferenceRule() {
		return getJvmTypeReferenceAccess().getRule();
	}

	//XFunctionTypeRef:
	//	("(" paramTypes+=JvmTypeReference ("," paramTypes+=JvmTypeReference)* ")")? "=>" returnType=JvmTypeReference;
	public XtypeGrammarAccess.XFunctionTypeRefElements getXFunctionTypeRefAccess() {
		return gaXbase.getXFunctionTypeRefAccess();
	}
	
	public ParserRule getXFunctionTypeRefRule() {
		return getXFunctionTypeRefAccess().getRule();
	}

	//JvmParameterizedTypeReference:
	//	type=[JvmType|QualifiedName] ("<" arguments+=JvmArgumentTypeReference ("," arguments+=JvmArgumentTypeReference)*
	//	">")?;
	public XtypeGrammarAccess.JvmParameterizedTypeReferenceElements getJvmParameterizedTypeReferenceAccess() {
		return gaXbase.getJvmParameterizedTypeReferenceAccess();
	}
	
	public ParserRule getJvmParameterizedTypeReferenceRule() {
		return getJvmParameterizedTypeReferenceAccess().getRule();
	}

	//JvmArgumentTypeReference returns JvmTypeReference:
	//	JvmTypeReference | JvmWildcardTypeReference;
	public XtypeGrammarAccess.JvmArgumentTypeReferenceElements getJvmArgumentTypeReferenceAccess() {
		return gaXbase.getJvmArgumentTypeReferenceAccess();
	}
	
	public ParserRule getJvmArgumentTypeReferenceRule() {
		return getJvmArgumentTypeReferenceAccess().getRule();
	}

	//JvmWildcardTypeReference:
	//	{JvmWildcardTypeReference} "?" (constraints+=JvmUpperBound | constraints+=JvmLowerBound)?;
	public XtypeGrammarAccess.JvmWildcardTypeReferenceElements getJvmWildcardTypeReferenceAccess() {
		return gaXbase.getJvmWildcardTypeReferenceAccess();
	}
	
	public ParserRule getJvmWildcardTypeReferenceRule() {
		return getJvmWildcardTypeReferenceAccess().getRule();
	}

	//JvmUpperBound:
	//	"extends" typeReference=JvmTypeReference;
	public XtypeGrammarAccess.JvmUpperBoundElements getJvmUpperBoundAccess() {
		return gaXbase.getJvmUpperBoundAccess();
	}
	
	public ParserRule getJvmUpperBoundRule() {
		return getJvmUpperBoundAccess().getRule();
	}

	//JvmUpperBoundAnded returns JvmUpperBound:
	//	"&" typeReference=JvmTypeReference;
	public XtypeGrammarAccess.JvmUpperBoundAndedElements getJvmUpperBoundAndedAccess() {
		return gaXbase.getJvmUpperBoundAndedAccess();
	}
	
	public ParserRule getJvmUpperBoundAndedRule() {
		return getJvmUpperBoundAndedAccess().getRule();
	}

	//JvmLowerBound:
	//	"super" typeReference=JvmTypeReference;
	public XtypeGrammarAccess.JvmLowerBoundElements getJvmLowerBoundAccess() {
		return gaXbase.getJvmLowerBoundAccess();
	}
	
	public ParserRule getJvmLowerBoundRule() {
		return getJvmLowerBoundAccess().getRule();
	}

	//JvmTypeParameter:
	//	name=ValidID (constraints+=JvmUpperBound constraints+=JvmUpperBoundAnded* | constraints+=JvmLowerBound)?;
	public XtypeGrammarAccess.JvmTypeParameterElements getJvmTypeParameterAccess() {
		return gaXbase.getJvmTypeParameterAccess();
	}
	
	public ParserRule getJvmTypeParameterRule() {
		return getJvmTypeParameterAccess().getRule();
	}

	//ValidID:
	//	ID;
	public XtypeGrammarAccess.ValidIDElements getValidIDAccess() {
		return gaXbase.getValidIDAccess();
	}
	
	public ParserRule getValidIDRule() {
		return getValidIDAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "$" | "_") ("a".."z" | "A".."Z" | "$" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaXbase.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaXbase.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaXbase.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaXbase.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaXbase.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaXbase.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaXbase.getANY_OTHERRule();
	} 
}
