/*
 * generated by Xtext
 */
package org.eclipse.emf.ecore.xcore.scoping;

import java.util.ArrayList;
import java.util.List;

import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.common.util.URI;
import org.eclipse.emf.ecore.EAttribute;
import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EClassifier;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EOperation;
import org.eclipse.emf.ecore.EReference;
import org.eclipse.emf.ecore.ETypeParameter;
import org.eclipse.emf.ecore.EcorePackage;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.xcore.XAnnotationDirective;
import org.eclipse.emf.ecore.xcore.XClassifier;
import org.eclipse.emf.ecore.xcore.XOperation;
import org.eclipse.emf.ecore.xcore.XPackage;
import org.eclipse.emf.ecore.xcore.XcorePackage;
import org.eclipse.emf.ecore.xcore.util.XcoreEcoreBuilder;
import org.eclipse.xtext.naming.QualifiedName;
import org.eclipse.xtext.resource.AbstractEObjectDescription;
import org.eclipse.xtext.resource.IEObjectDescription;
import org.eclipse.xtext.scoping.IScope;
import org.eclipse.xtext.scoping.impl.AbstractScope;
import org.eclipse.xtext.scoping.impl.FilteringScope;
import org.eclipse.xtext.xbase.scoping.XbaseScopeProvider;

import com.google.common.base.Predicate;

/**
 * This class contains custom scoping description.
 * 
 * see : http://www.eclipse.org/Xtext/documentation/latest/xtext.html#scoping
 * on how and when to use it 
 *
 */
public class XcoreScopeProvider extends XbaseScopeProvider  {

  @Override
  public IScope getScope(final EObject context, EReference reference)
  {
    IScope scope = 
      new FilteringScope
        (super.getScope(context, reference), 
         new Predicate<IEObjectDescription>()
         {
           public boolean apply(IEObjectDescription input)
           {
             EClass eClass = input.getEClass();
             return 
               eClass.getEPackage() != EcorePackage.eINSTANCE ||
               eClass == EcorePackage.Literals.ECLASS ||
               eClass == EcorePackage.Literals.EDATA_TYPE ||
               eClass == EcorePackage.Literals.EENUM;
           }
         });
    if (reference == XcorePackage.Literals.XGENERIC_TYPE__TYPE)
    {
      return 
        new AbstractScope(scope, false)
        {
          void handleETypeParameters(List<IEObjectDescription> result, EList<ETypeParameter> eTypeParameters)
          {
            for (final ETypeParameter eTypeParameter : eTypeParameters)
            {
              result.add
                (new AbstractEObjectDescription()
                 {
                   public QualifiedName getQualifiedName()
                   {
                     return QualifiedName.create(eTypeParameter.getName());
                   }
                         
                   public QualifiedName getName()
                   {
                     return QualifiedName.create(eTypeParameter.getName());
                   }
                         
                   public URI getEObjectURI()
                   {
                     return EcoreUtil.getURI(eTypeParameter);
                   }
                         
                   public EObject getEObjectOrProxy()
                   {
                     return eTypeParameter;
                   }
                         
                   public EClass getEClass()
                   {
                     return EcorePackage.Literals.ETYPE_PARAMETER;
                   }
                 });
            }
          }

          @Override
          protected Iterable<IEObjectDescription> getAllLocalElements()
          {
            ArrayList<IEObjectDescription> result = new ArrayList<IEObjectDescription>();
            for (EObject eObject = context; eObject != null; eObject = eObject.eContainer())
            {
              if (eObject instanceof XOperation)
              {
                EOperation eOperation = (EOperation)XcoreEcoreBuilder.get(eObject);
                handleETypeParameters(result, eOperation.getETypeParameters());
              }
              else if (eObject instanceof XClassifier)
              {
                EClassifier eClassifier = (EClassifier)XcoreEcoreBuilder.get(eObject);
                handleETypeParameters(result, eClassifier.getETypeParameters());
                break;
              }
            }
            return result;
          }
        };
    }
    else if (reference == XcorePackage.Literals.XANNOTATION__SOURCE)
    {
      return 
        new AbstractScope(scope, false)
        {
          @Override
          protected Iterable<IEObjectDescription> getAllLocalElements()
          {
            ArrayList<IEObjectDescription> result = new ArrayList<IEObjectDescription>();
            for (EObject eObject = context; eObject != null; eObject = eObject.eContainer())
            {
              if (eObject instanceof XPackage)
              {
                XPackage xPackage = (XPackage)eObject;
                for (final XAnnotationDirective xAnnotationDirective : xPackage.getAnnotationDirectives())
                {
                  result.add
                    (new AbstractEObjectDescription()
                     {
                       public QualifiedName getQualifiedName()
                       {
                         return QualifiedName.create(xAnnotationDirective.getName());
                       }
                             
                       public QualifiedName getName()
                       {
                         return QualifiedName.create(xAnnotationDirective.getName());
                       }
                             
                       public URI getEObjectURI()
                       {
                         return EcoreUtil.getURI(xAnnotationDirective);
                       }
                             
                       public EObject getEObjectOrProxy()
                       {
                         return xAnnotationDirective;
                       }
                             
                       public EClass getEClass()
                       {
                         return XcorePackage.Literals.XANNOTATION_DIRECTIVE;
                       }
                     });
                }
              }
            }
            return result;
          }
        };
    }
    else if (reference == XcorePackage.Literals.XSTRUCTURAL_FEATURE__OPPOSITE)
    {
      return 
        new AbstractScope(scope, false)
        {
          @Override
          protected Iterable<IEObjectDescription> getAllLocalElements()
          {
            ArrayList<IEObjectDescription> result = new ArrayList<IEObjectDescription>();
            EReference eReference = (EReference)XcoreEcoreBuilder.get(context);
            for (final EReference eOpposite : eReference.getEReferenceType().getEReferences())
            {
              result.add
                (new AbstractEObjectDescription()
                 {
                   public QualifiedName getQualifiedName()
                   {
                     return QualifiedName.create(eOpposite.getName());
                   }
                             
                   public QualifiedName getName()
                   {
                     return QualifiedName.create(eOpposite.getName());
                   }
                             
                   public URI getEObjectURI()
                   {
                     return EcoreUtil.getURI(eOpposite);
                   }
                             
                   public EObject getEObjectOrProxy()
                   {
                     return eOpposite;
                   }
                             
                   public EClass getEClass()
                   {
                     return XcorePackage.Literals.XANNOTATION_DIRECTIVE;
                   }
                 });
            }
            return result;
          }
        };
      
    }
    else if (reference == XcorePackage.Literals.XSTRUCTURAL_FEATURE__KEYS)
    {
      return 
        new AbstractScope(scope, false)
        {
          @Override
          protected Iterable<IEObjectDescription> getAllLocalElements()
          {
            ArrayList<IEObjectDescription> result = new ArrayList<IEObjectDescription>();
            EReference eReference = (EReference)XcoreEcoreBuilder.get(context);
            for (final EAttribute eKey : eReference.getEReferenceType().getEAttributes())
            {
              result.add
                (new AbstractEObjectDescription()
                 {
                   public QualifiedName getQualifiedName()
                   {
                     return QualifiedName.create(eKey.getName());
                   }
                             
                   public QualifiedName getName()
                   {
                     return QualifiedName.create(eKey.getName());
                   }
                             
                   public URI getEObjectURI()
                   {
                     return EcoreUtil.getURI(eKey);
                   }
                             
                   public EObject getEObjectOrProxy()
                   {
                     return eKey;
                   }
                             
                   public EClass getEClass()
                   {
                     return XcorePackage.Literals.XANNOTATION_DIRECTIVE;
                   }
                 });
            }
            return result;
          }
        };
      
    }
    else
    {
      return scope;
    }
  }
}
