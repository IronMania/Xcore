/*
 * generated by Xtext
 */
package org.eclipse.emf.ecore.xcore.generator

import com.google.inject.Inject
import org.eclipse.emf.codegen.ecore.generator.Generator
import org.eclipse.emf.codegen.ecore.genmodel.GenModel
import org.eclipse.emf.codegen.ecore.genmodel.GenModelPackage
import org.eclipse.emf.codegen.ecore.genmodel.generator.GenBaseGeneratorAdapter
import org.eclipse.emf.common.util.BasicMonitor
import org.eclipse.emf.ecore.EcoreFactory
import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.emf.ecore.xcore.XOperation
import org.eclipse.emf.ecore.xcore.XPackage
import org.eclipse.emf.ecore.xcore.mappings.XcoreMapper
import org.eclipse.xtext.generator.IFileSystemAccess
import org.eclipse.xtext.generator.IGenerator
import org.eclipse.xtext.xbase.compiler.StringBuilderBasedAppendable
import org.eclipse.xtext.xbase.compiler.XbaseCompiler

import static extension org.eclipse.xtext.xtend2.lib.EObjectExtensions.*
import com.google.inject.Provider
import org.eclipse.emf.ecore.xcore.XStructuralFeature
import org.eclipse.xtext.xbase.compiler.ImportManager
import org.eclipse.emf.ecore.EDataType
import org.eclipse.emf.ecore.xcore.XDataType
import org.eclipse.xtext.common.types.util.TypeReferences

class XcoreGenerator implements IGenerator {
	
	@Inject
	extension XcoreMapper mappings
	
	@Inject
	XbaseCompiler compiler
	
	@Inject
	Provider<XcoreGeneratorImpl> xcoreGeneratorImplProvider
	
	@Inject
    TypeReferences typeReferences
	
	override void doGenerate(Resource resource, IFileSystemAccess fsa) {
		val pack = resource.contents.head as XPackage
		// install operation bodies
		for (op : pack.allContentsIterable.filter(typeof(XOperation))) {
			val eOperation = op.mapping.EOperation
			val body = op.body
			if (body != null)
			{
				val appendable = createAppendable
				appendable.declareVariable(mappings.getMapping(op).jvmOperation.declaringType, "this");
				compiler.compile(body, appendable, null)
				eOperation.EAnnotations.add(createGenModelAnnotation("body", extractBody(appendable.toString)))
			}
		}
		// install feature accessors
		for (feature : pack.allContentsIterable.filter(typeof(XStructuralFeature))) {
			val eStructuralFeature = feature.mapping.EStructuralFeature
			val getBody = feature.getBody
			if (getBody != null) {
				val getter = mappings.getMapping(feature).getter
				val appendable = createAppendable
				appendable.declareVariable(getter.declaringType, "this");
				compiler.compile(getBody, appendable, null)
				eStructuralFeature.EAnnotations.add(createGenModelAnnotation("get", extractBody(appendable.toString)))
			}
		}
		// install data type converters
		for (dataType : pack.allContentsIterable.filter(typeof(XDataType))) {
			val eDataType = dataType.mapping.EDataType
			val createBody = dataType.createBody
			if (createBody != null) {
				val appendable = createAppendable
				appendable.declareVariable(dataType.mapping.dataType, "it");
				compiler.compile(createBody, appendable, null)
				eDataType.EAnnotations.add(createGenModelAnnotation("create", appendable.toString))
			}
			val convertBody = dataType.convertBody
			if (convertBody != null) {
				val appendable = createAppendable
				appendable.declareVariable(typeReferences.getTypeForName("java.lang.String", dataType), "it");
				compiler.compile(convertBody, appendable, null)
				eDataType.EAnnotations.add(createGenModelAnnotation("convert", extractBody(appendable.toString)))
			}
		}

		generateGenModel(resource.contents.filter(typeof(GenModel)).head, fsa)
	}
	
	def createAppendable() {
		new XcoreAppendable()
	}
	
	def extractBody(String body) {
		var result = if (body.startsWith("\n")) body.substring(1) else body
		if (result.startsWith("{\n")) {
			result = result.replace("\n\t", "\n")
			result.substring(1, result.length - 2)
		} else {
			result
		}
	}
	
	def generateGenModel(GenModel genModel, IFileSystemAccess fsa) {
		genModel.canGenerate = true
		val generator = xcoreGeneratorImplProvider.get
		generator.input = genModel
		generator.fileSystemAccess = fsa
		generator.generate(genModel, GenBaseGeneratorAdapter::MODEL_PROJECT_TYPE,
				new BasicMonitor());
	}
	
	def createGenModelAnnotation(String key, String value) {
		val result = EcoreFactory::eINSTANCE.createEAnnotation
		result.source = GenModelPackage::eNS_URI
		result.details.put(key, value)
		return result
	}
}
