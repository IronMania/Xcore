/*
 * generated by Xtext
 */
package org.eclipse.emf.ecore.xcore;

import org.eclipse.emf.ecore.xcore.linking.XcoreLazyLinker;
import org.eclipse.emf.ecore.xcore.resource.XcoreResource;
import org.eclipse.emf.ecore.xcore.scoping.XcoreImportedNamespaceAwareScopeProvider;
import org.eclipse.emf.ecore.xcore.scoping.XcoreQualifiedNameProvider;
import org.eclipse.emf.ecore.xcore.scoping.XcoreResourceDescriptionManager;
import org.eclipse.emf.ecore.xcore.scoping.XcoreResourceDescriptionStrategy;
import org.eclipse.xtext.linking.ILinker;
import org.eclipse.xtext.naming.IQualifiedNameProvider;
import org.eclipse.xtext.parser.antlr.IReferableElementsUnloader;
import org.eclipse.xtext.resource.IDefaultResourceDescriptionStrategy;
import org.eclipse.xtext.resource.IResourceDescription;
import org.eclipse.xtext.resource.XtextResource;
import org.eclipse.xtext.scoping.IScopeProvider;
import org.eclipse.xtext.scoping.impl.AbstractDeclarativeScopeProvider;
import org.eclipse.xtext.serializer.ISerializer;
import org.eclipse.xtext.serializer.impl.Serializer;

import com.google.inject.Binder;
import com.google.inject.name.Names;

/**
 * Use this class to register components to be used at runtime / without the Equinox extension registry.
 */
public class XcoreRuntimeModule extends org.eclipse.emf.ecore.xcore.AbstractXcoreRuntimeModule 
{
  @Override
  public Class<? extends ILinker> bindILinker() 
  {
    return XcoreLazyLinker.class;
  }
  
  @Override
  public Class<? extends ISerializer> bindISerializer()
  {
    return Serializer.class;
  }
  
  public Class<? extends IDefaultResourceDescriptionStrategy> bindIDefaultResourceDescriptionStrategy()
  {
	return XcoreResourceDescriptionStrategy.class;
  }
  
  @Override
  public Class<? extends XtextResource> bindXtextResource() 
  {
	return XcoreResource.class;
  }
  
  @Override
  public Class<? extends IQualifiedNameProvider> bindIQualifiedNameProvider()
  {
    return XcoreQualifiedNameProvider.class;
  }
  
  @Override
  public void configureIScopeProviderDelegate(Binder binder)
  {
    binder.bind(IScopeProvider.class).annotatedWith(Names.named(AbstractDeclarativeScopeProvider.NAMED_DELEGATE)).to(XcoreImportedNamespaceAwareScopeProvider.class);
  }
  
  public Class<? extends IResourceDescription.Manager> bindIResourceDescriptionManager() 
  {
  	return XcoreResourceDescriptionManager.class;
  }
  
  public Class<? extends IReferableElementsUnloader> bindIReferableElementsUnloader() 
  {
  	return IReferableElementsUnloader.GenericUnloader.class;
  }
  
}
